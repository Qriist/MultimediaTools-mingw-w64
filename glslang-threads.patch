--- StandAlone/StandAlone.cpp.orig	2018-06-07 11:47:25.506296500 +0100
+++ StandAlone/StandAlone.cpp	2018-06-07 11:49:26.189975600 +0100
@@ -57,7 +57,8 @@
 #include <array>
 #include <map>
 #include <memory>
-#include <thread>
+#include <boost/thread.hpp>
+#include <boost/chrono.hpp>
 
 #include "../glslang/OSDependent/osinclude.h"
 
@@ -1115,16 +1116,16 @@
         bool printShaderNames = workList.size() > 1;
 
         if (Options & EOptionMultiThreaded) {
-            std::array<std::thread, 16> threads;
+            std::array<boost::thread, 16> threads;
             for (unsigned int t = 0; t < threads.size(); ++t) {
-                threads[t] = std::thread(CompileShaders, std::ref(workList));
-                if (threads[t].get_id() == std::thread::id()) {
+                threads[t] = boost::thread(CompileShaders, std::ref(workList));
+                if (threads[t].get_id() == boost::thread::id()) {
                     fprintf(stderr, "Failed to create thread\n");
                     return EFailThreadCreate;
                 }
             }
 
-            std::for_each(threads.begin(), threads.end(), [](std::thread& t) { t.join(); });
+            std::for_each(threads.begin(), threads.end(), [](boost::thread& t) { t.join(); });
         } else
             CompileShaders(workList);
 
--- StandAlone/Worklist.h.orig	2018-06-07 11:50:50.364365600 +0100
+++ StandAlone/Worklist.h	2018-06-07 11:52:56.060310800 +0100
@@ -37,7 +37,8 @@
 
 #include "../glslang/OSDependent/osinclude.h"
 #include <list>
-#include <mutex>
+#include <boost/thread.hpp>
+#include <boost/chrono.hpp>
 #include <string>
 
 namespace glslang {
@@ -59,13 +59,13 @@
 
         void add(TWorkItem* item)
         {
-            std::lock_guard<std::mutex> guard(mutex);
+            boost::lock_guard<boost::mutex> guard(mutex);
             worklist.push_back(item);
         }
 
         bool remove(TWorkItem*& item)
         {
-            std::lock_guard<std::mutex> guard(mutex);
+            boost::lock_guard<boost::mutex> guard(mutex);
 
             if (worklist.empty())
                 return false;
@@ -86,7 +86,7 @@
         }
 
     protected:
-        std::mutex mutex;
+        boost::mutex mutex;
         std::list<TWorkItem*> worklist;
     };
 
--- StandAlone/CMakeLists.txt.orig	2018-06-07 11:54:19.618212900 +0100
+++ StandAlone/CMakeLists.txt	2018-06-07 11:55:07.693118400 +0100
@@ -24,10 +24,10 @@
     glslang-default-resource-limits)
 
 if(WIN32)
-    set(LIBRARIES ${LIBRARIES} psapi)
+    set(LIBRARIES ${LIBRARIES} boost_exception-mt-x64 boost_thread-mt-x64 boost_system-mt-x64)
 elseif(UNIX)
     if(NOT ANDROID)
-        set(LIBRARIES ${LIBRARIES} pthread)
+        set(LIBRARIES ${LIBRARIES} boost_exception-mt-x64 boost_thread-mt-x64 boost_system-mt-x64)
     endif()
 endif(WIN32)
 
--- StandAlone/StandAlone.cpp.orig	2018-06-07 13:38:11.418696900 +0100
+++ StandAlone/StandAlone.cpp	2018-06-07 13:37:16.146954900 +0100
@@ -66,6 +66,13 @@
     SH_IMPORT_EXPORT void ShOutputHtml();
 }
 
+namespace boost {
+        void throw_exception(std::exception const &e){}
+}
+                   
+                   
+
+
 // Command-line options
 enum TOptions {
     EOptionNone                 = 0,
--- CMakeLists.txt.orig	2018-06-07 13:59:10.081332600 +0100
+++ CMakeLists.txt	2018-06-07 13:59:49.442890700 +0100
@@ -57,7 +57,7 @@
 
 if(${CMAKE_CXX_COMPILER_ID} MATCHES "GNU")
     add_compile_options(-Wall -Wmaybe-uninitialized -Wuninitialized -Wunused -Wunused-local-typedefs
-                        -Wunused-parameter -Wunused-value  -Wunused-variable -Wunused-but-set-parameter -Wunused-but-set-variable -fno-exceptions)
+        -Wunused-parameter -Wunused-value  -Wunused-variable -Wunused-but-set-parameter -Wunused-but-set-variable -fno-exceptions -DBOOST_NO_EXCEPTIONS)
     add_compile_options(-Wno-reorder)  # disable this from -Wall, since it happens all over.
 elseif(${CMAKE_CXX_COMPILER_ID} MATCHES "Clang")
     add_compile_options(-Wall -Wuninitialized -Wunused -Wunused-local-typedefs
