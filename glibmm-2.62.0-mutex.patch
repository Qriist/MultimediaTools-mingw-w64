--- glib/glibmm/objectbase.h.orig	2020-01-05 11:18:17.175742801 +0000
+++ glib/glibmm/objectbase.h	2020-01-05 11:18:58.767341356 +0000
@@ -29,7 +29,7 @@
 #include <typeinfo>
 #include <map> // Needed until the next ABI break.
 #include <memory> // Not used by ObjectBase any more, but user code may rely on it being here.
-#include <mutex>
+#include <boost/thread/mutex.hpp>
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 extern "C" {
@@ -277,7 +277,7 @@
   static extra_object_base_data_type extra_object_base_data;
   // ObjectBase instances may be used in different threads.
   // Accesses to extra_object_base_data must be thread-safe.
-  static std::mutex extra_object_base_data_mutex;
+  static boost::mutex extra_object_base_data_mutex;
 #endif // DOXYGEN_SHOULD_SKIP_THIS
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
--- glib/glibmm/dispatcher.cc.orig	2020-01-05 11:22:43.829143483 +0000
+++ glib/glibmm/dispatcher.cc	2020-01-05 11:24:37.860017008 +0000
@@ -34,7 +34,8 @@
 #include <io.h>
 #include <direct.h>
 #include <list>
-#include <mutex>
+#include <boost/thread/lock_guard.hpp>
+#include <boost/thread/mutex.hpp>
 #else
 #include <unistd.h>
 #endif
@@ -157,7 +158,7 @@
   long ref_count_;
   Glib::RefPtr<MainContext> context_;
 #ifdef G_OS_WIN32
-  std::mutex mutex_;
+  boost::mutex mutex_;
   std::list<DispatchNotifyData> notify_queue_;
   HANDLE fd_receiver_;
 #else
@@ -357,7 +358,7 @@
 {
 #ifdef G_OS_WIN32
   {
-    const std::lock_guard<std::mutex> lock(mutex_);
+    const boost::lock_guard<boost::mutex> lock(mutex_);
 
     const bool was_empty = notify_queue_.empty();
     notify_queue_.emplace_back(DispatchNotifyData(dispatcher, this));
@@ -418,7 +419,7 @@
 
 #ifdef G_OS_WIN32
   {
-    const std::lock_guard<std::mutex> lock(mutex_);
+    const boost::lock_guard<boost::mutex> lock(mutex_);
 
     // Should never be empty at this point, but let's allow for bogus
     // notifications with no data available anyway; just to be safe.
--- glib/glibmm/main.cc.orig	2020-01-05 11:25:31.747482353 +0000
+++ glib/glibmm/main.cc	2020-01-05 11:27:35.882246042 +0000
@@ -60,7 +60,7 @@
 std::map<const Glib::Source*, ExtraSourceData> extra_source_data;
 // Source instances may be used in different threads.
 // Accesses to extra_source_data must be thread-safe.
-std::mutex extra_source_data_mutex;
+boost::mutex extra_source_data_mutex;
 
 class SourceConnectionNode
 {
@@ -174,7 +174,7 @@
 
   if (self->wrapper)
   {
-    std::unique_lock<std::mutex> lock(extra_source_data_mutex);
+    boost::unique_lock<boost::mutex> lock(extra_source_data_mutex);
     if (--extra_source_data[self->wrapper].keep_wrapper == 0)
     {
       // No other reference exists to the wrapper. Delete it!
@@ -936,14 +936,14 @@
 void
 Source::reference() const
 {
-  std::lock_guard<std::mutex> lock(extra_source_data_mutex);
+  boost::lock_guard<boost::mutex> lock(extra_source_data_mutex);
   ++extra_source_data[this].ref_count;
 }
 
 void
 Source::unreference() const
 {
-  std::unique_lock<std::mutex> lock(extra_source_data_mutex);
+  boost::unique_lock<boost::mutex> lock(extra_source_data_mutex);
   if (--extra_source_data[this].ref_count == 0)
   {
     GSource* const tmp_gobject = gobject_;
--- glib/glibmm/objectbase.cc.orig	2020-01-05 11:28:09.369911551 +0000
+++ glib/glibmm/objectbase.cc	2020-01-05 11:29:54.552858664 +0000
@@ -41,7 +41,7 @@
 
 // static data members
 ObjectBase::extra_object_base_data_type ObjectBase::extra_object_base_data;
-std::mutex ObjectBase::extra_object_base_data_mutex;
+boost::mutex ObjectBase::extra_object_base_data_mutex;
 
 ObjectBase::ObjectBase()
 : gobject_(nullptr),
@@ -157,7 +157,7 @@
   // 'this' should have been erased from extra_object_base_data by
   // Glib::Object's constructor.
   {
-    std::lock_guard<std::mutex> lock(extra_object_base_data_mutex);
+    boost::lock_guard<boost::mutex> lock(extra_object_base_data_mutex);
     extra_object_base_data.erase(this);
   }
 
@@ -405,47 +405,47 @@
 {
   // The GObject is not instantiated yet. Add to the custom_interface_classes
   // and add the interface in the Glib::Object constructor.
-  std::lock_guard<std::mutex> lock(extra_object_base_data_mutex);
+  boost::lock_guard<boost::mutex> lock(extra_object_base_data_mutex);
   extra_object_base_data[this].custom_interface_classes.emplace_back(iface_class);
 }
 
 void ObjectBase::add_custom_class_init_function(GClassInitFunc class_init_func, void* class_data)
 {
-  std::lock_guard<std::mutex> lock(extra_object_base_data_mutex);
+  boost::lock_guard<boost::mutex> lock(extra_object_base_data_mutex);
   extra_object_base_data[this].custom_class_init_functions.emplace_back(
     std::make_tuple(class_init_func, class_data));
 }
 
 void ObjectBase::set_custom_instance_init_function(GInstanceInitFunc instance_init_func)
 {
-  std::lock_guard<std::mutex> lock(extra_object_base_data_mutex);
+  boost::lock_guard<boost::mutex> lock(extra_object_base_data_mutex);
   extra_object_base_data[this].custom_instance_init_function = instance_init_func;
 }
 
 const Class::interface_class_vector_type* ObjectBase::get_custom_interface_classes() const
 {
-  std::lock_guard<std::mutex> lock(extra_object_base_data_mutex);
+  boost::lock_guard<boost::mutex> lock(extra_object_base_data_mutex);
   const auto iter = extra_object_base_data.find(this);
   return (iter != extra_object_base_data.end()) ? &iter->second.custom_interface_classes : nullptr;
 }
 
 const Class::class_init_funcs_type* ObjectBase::get_custom_class_init_functions() const
 {
-  std::lock_guard<std::mutex> lock(extra_object_base_data_mutex);
+  boost::lock_guard<boost::mutex> lock(extra_object_base_data_mutex);
   const auto iter = extra_object_base_data.find(this);
   return (iter != extra_object_base_data.end()) ? &iter->second.custom_class_init_functions : nullptr;
 }
 
 GInstanceInitFunc ObjectBase::get_custom_instance_init_function() const
 {
-  std::lock_guard<std::mutex> lock(extra_object_base_data_mutex);
+  boost::lock_guard<boost::mutex> lock(extra_object_base_data_mutex);
   const auto iter = extra_object_base_data.find(this);
   return (iter != extra_object_base_data.end()) ? iter->second.custom_instance_init_function : nullptr;
 }
 
 void ObjectBase::custom_class_init_finished()
 {
-  std::lock_guard<std::mutex> lock(extra_object_base_data_mutex);
+  boost::lock_guard<boost::mutex> lock(extra_object_base_data_mutex);
   const auto iter = extra_object_base_data.find(this);
   if (iter != extra_object_base_data.end())
     extra_object_base_data.erase(iter);
--- glib/glibmm/main.cc.orig	2020-01-05 11:38:27.559690183 +0000
+++ glib/glibmm/main.cc	2020-01-05 11:38:56.195400617 +0000
@@ -28,6 +28,7 @@
 #include <glibmm/wrap.h>
 #include <glibmm/iochannel.h>
 #include <glibmm/utility.h>
+#include <boost/thread/lock_guard.hpp>
 #include <algorithm>
 #include <map> // Needed until the next ABI break.
 
--- glib/glibmm/objectbase.cc.orig	2020-01-05 11:39:07.699284267 +0000
+++ glib/glibmm/objectbase.cc	2020-01-05 11:39:33.179026525 +0000
@@ -21,6 +21,7 @@
 #include <glibmm/propertyproxy_base.h> //For PropertyProxyConnectionNode
 #include <glibmm/interface.h>
 #include <glibmm/private/interface_p.h>
+#include <boost/thread/lock_guard.hpp>
 #include <utility> // For std::move()
 
 namespace
--- gio/giomm/application.cc.orig	2020-01-05 11:42:25.573281332 +0000
+++ gio/giomm/application.cc	2020-01-05 11:45:37.631544637 +0000
@@ -30,6 +30,8 @@
 #include <cstring> // std::memset()
 #include <map>
 #include <vector>
+#include <boost/thread/mutex.hpp>
+#include <boost/thread/lock_guard.hpp>
 
 namespace // anonymous
 {
@@ -199,7 +201,7 @@
 
 // Gio::Application instances may be used in different threads.
 // Accesses to option_arg_callback_data must be thread-safe.
-std::mutex option_arg_callback_data_mutex;
+boost::mutex option_arg_callback_data_mutex;
 
 gboolean
 Application_option_arg_callback(
@@ -209,7 +211,7 @@
 
   // option_name is either a single dash followed by a single letter (for a
   // short name) or two dashes followed by a long option name.
-  std::unique_lock<std::mutex> lock(option_arg_callback_data_mutex);
+  boost::unique_lock<boost::mutex> lock(option_arg_callback_data_mutex);
   OptionArgCallbackDataMap::const_iterator iterFind = option_arg_callback_data.end();
   if (option_name[1] == '-')
   {
@@ -292,7 +294,7 @@
 Application::~Application() noexcept
 {
   // Delete all OptionArgCallbackData instances that belong to this application.
-  std::lock_guard<std::mutex> lock(option_arg_callback_data_mutex);
+  boost::lock_guard<boost::mutex> lock(option_arg_callback_data_mutex);
   OptionArgCallbackDataMap::iterator iter = option_arg_callback_data.begin();
   while (iter != option_arg_callback_data.end())
   {
@@ -413,7 +415,7 @@
   const Glib::ustring& arg_description, int flags)
 {
   {
-    std::lock_guard<std::mutex> lock(option_arg_callback_data_mutex);
+    boost::lock_guard<boost::mutex> lock(option_arg_callback_data_mutex);
     OptionArgCallbackDataMap::iterator iterFind = option_arg_callback_data.find(long_name);
     if (iterFind != option_arg_callback_data.end())
       return; // Ignore duplicates
@@ -432,7 +434,7 @@
   const Glib::ustring& arg_description, int flags)
 {
   {
-    std::lock_guard<std::mutex> lock(option_arg_callback_data_mutex);
+    boost::lock_guard<boost::mutex> lock(option_arg_callback_data_mutex);
     OptionArgCallbackDataMap::iterator iterFind = option_arg_callback_data.find(long_name);
     if (iterFind != option_arg_callback_data.end())
       return; // Ignore duplicates
