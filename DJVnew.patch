--- CMakeLists.txt.orig	2020-01-18 17:01:46.972822338 +0000
+++ CMakeLists.txt	2020-01-18 17:02:15.404551441 +0000
@@ -75,8 +75,8 @@
 elseif(WIN32)
     set(DJV_PLATFORM_WINDOWS TRUE)
     add_definitions(-DDJV_PLATFORM_WINDOWS)
-	set(CMAKE_C_FLAGS "/MP /EHsc")
-	set(CMAKE_CXX_FLAGS "/MP /EHsc")
+    #	set(CMAKE_C_FLAGS "/MP /EHsc")
+    #	set(CMAKE_CXX_FLAGS "/MP /EHsc")
 endif()
 
 # Set the output directories for the build.
--- cmake/Modules/FindOCIO.cmake.orig	2020-01-24 15:12:03.165692835 +0000
+++ cmake/Modules/FindOCIO.cmake	2020-01-24 15:12:36.445381375 +0000
@@ -43,7 +43,7 @@
     set_target_properties(OCIO::OCIO PROPERTIES
         IMPORTED_LOCATION "${OCIO_LIBRARY}"
         INTERFACE_INCLUDE_DIRECTORIES "${OCIO_INCLUDE_DIRS}"
-		INTERFACE_COMPILE_DEFINITIONS ${OCIO_DEFINES})
+		INTERFACE_COMPILE_DEFINITIONS "${OCIO_DEFINES}")
 endif()
 if(OCIO_FOUND AND NOT TARGET OCIO)
     add_library(OCIO INTERFACE)
--- lib/djvCore/DrivesModel.cpp.orig	2020-01-24 21:21:40.595383783 +0000
+++ lib/djvCore/DrivesModel.cpp	2020-01-24 21:23:28.946275857 +0000
@@ -33,8 +33,15 @@
 #include <djvCore/Timer.h>
 
 #include <atomic>
-#include <mutex>
-#include <thread>
+#include <boost/thread.hpp>
+namespace std {
+        using boost::mutex;
+        using boost::recursive_mutex;
+        using boost::lock_guard;
+        using boost::condition_variable;
+        using boost::unique_lock;
+        using boost::thread;
+ }
 
 //#pragma optimize("", off)
 
--- lib/djvCore/DirectoryModel.cpp.orig	2020-01-24 21:27:39.435728663 +0000
+++ lib/djvCore/DirectoryModel.cpp	2020-01-24 21:32:16.924922317 +0000
@@ -34,7 +34,11 @@
 #include <djvCore/Timer.h>
 #include <djvCore/OS.h>
 
-#include <future>
+#include <boost/thread.hpp>
+
+namespace std {
+	using boost::future;
+}
 
 namespace djv
 {
--- lib/djvCore/DirectoryModel.cpp.orig	2020-01-24 21:47:12.258545636 +0000
+++ lib/djvCore/DirectoryModel.cpp	2020-01-24 21:47:29.558402436 +0000
@@ -35,6 +35,7 @@
 #include <djvCore/OS.h>
 
 #include <boost/thread.hpp>
+#include <boost/thread/future.hpp>
 
 namespace std {
 	using boost::future;
--- lib/djvCore/Context.cpp.orig	2020-01-24 21:51:41.844251919 +0000
+++ lib/djvCore/Context.cpp	2020-01-24 21:52:24.123882217 +0000
@@ -39,7 +39,15 @@
 #include <djvCore/Time.h>
 #include <djvCore/Timer.h>
 
-#include <thread>
+#include <boost/thread.hpp>
+namespace std {
+        using boost::mutex;
+        using boost::recursive_mutex;
+        using boost::lock_guard;
+        using boost::condition_variable;
+        using boost::unique_lock;
+        using boost::thread;
+ }
 
 #if defined(DJV_PLATFORM_WINDOWS)
 #include <fcntl.h>
--- lib/djvCore/DrivesModel.cpp.orig	2020-01-24 21:57:44.677020784 +0000
+++ lib/djvCore/DrivesModel.cpp	2020-01-24 21:58:51.528414180 +0000
@@ -80,7 +80,7 @@
                             std::lock_guard<std::mutex> lock(p.mutex);
                             p.drives = drives;
                         }
-                        std::this_thread::sleep_for(timeout);
+                        boost::this_thread::sleep_for(timeout);
                     }
                 });
 
--- lib/djvCore/DrivesModel.cpp.orig	2020-01-24 23:08:34.877832607 +0000
+++ lib/djvCore/DrivesModel.cpp	2020-01-24 23:10:12.005114484 +0000
@@ -80,7 +80,7 @@
                             std::lock_guard<std::mutex> lock(p.mutex);
                             p.drives = drives;
                         }
-                        boost::this_thread::sleep_for(timeout);
+                        boost::this_thread::sleep_for((boost::chrono::duration<long long int, boost::ratio<1, 1000000>>&)timeout);
                     }
                 });
 
--- lib/djvCore/DrivesModel.cpp.orig	2020-01-24 23:22:53.805248962 +0000
+++ lib/djvCore/DrivesModel.cpp	2020-01-24 23:23:17.912609027 +0000
@@ -42,6 +42,7 @@
         using boost::unique_lock;
         using boost::thread;
  }
+#include <boost/ratio.hpp>
 
 //#pragma optimize("", off)
 
--- lib/djvCore/DirectoryModel.cpp.orig	2020-01-25 16:27:28.393362674 +0000
+++ lib/djvCore/DirectoryModel.cpp	2020-01-25 16:31:59.694801674 +0000
@@ -66,7 +66,7 @@
                 std::shared_ptr<ValueSubject<bool> > reverseSort;
                 std::shared_ptr<ValueSubject<bool> > sortDirectoriesFirst;
                 std::shared_ptr<ValueSubject<std::string> > filter;
-                std::future<std::pair<std::vector<FileInfo>, std::vector<std::string> > > future;
+                boost::future<std::pair<std::vector<FileInfo>, std::vector<std::string> > > future;
                 std::shared_ptr<Time::Timer> futureTimer;
                 std::shared_ptr<DirectoryWatcher> directoryWatcher;
             };
--- lib/djvCore/DirectoryModel.cpp.orig	2020-01-25 17:16:14.941120123 +0000
+++ lib/djvCore/DirectoryModel.cpp	2020-01-25 17:16:35.185221602 +0000
@@ -33,7 +33,7 @@
 #include <djvCore/FileInfo.h>
 #include <djvCore/Timer.h>
 #include <djvCore/OS.h>
-
+#define BOOST_THREAD_PROVIDES_FUTURE
 #include <boost/thread.hpp>
 #include <boost/thread/future.hpp>
 
--- lib/djvCore/DirectoryModel.cpp.orig	2020-01-25 17:23:18.469306386 +0000
+++ lib/djvCore/DirectoryModel.cpp	2020-01-25 17:27:15.680217845 +0000
@@ -372,7 +372,7 @@
                 options.reverseSort = p.reverseSort->get();
                 options.sortDirectoriesFirst = p.sortDirectoriesFirst->get();
                 options.filter = p.filter->get();
-                p.future = std::async(
+                p.future = boost::async(
                     std::launch::async,
                     [path, options]
                 {
--- lib/djvCore/DirectoryModel.cpp.orig	2020-01-25 17:33:30.701612790 +0000
+++ lib/djvCore/DirectoryModel.cpp	2020-01-25 17:35:41.140551414 +0000
@@ -373,7 +373,7 @@
                 options.sortDirectoriesFirst = p.sortDirectoriesFirst->get();
                 options.filter = p.filter->get();
                 p.future = boost::async(
-                    std::launch::async,
+                    boost::launch::async,
                     [path, options]
                 {
                     std::pair<std::vector<FileInfo>, std::vector<std::string> > out;
--- lib/djvCore/DirectoryModel.cpp.orig	2020-01-25 17:54:34.535134843 +0000
+++ lib/djvCore/DirectoryModel.cpp	2020-01-25 17:54:56.430942903 +0000
@@ -391,7 +391,7 @@
                 {
                     DJV_PRIVATE_PTR();
                     if (p.future.valid() &&
-                        p.future.wait_for(std::chrono::seconds(0)) == std::future_status::ready)
+                        p.future.wait_for(std::chrono::seconds(0)) == boost::future_status::ready)
                     {
                         p.futureTimer->stop();
 
--- lib/djvCore/DirectoryModel.cpp.orig	2020-01-25 18:11:07.850002922 +0000
+++ lib/djvCore/DirectoryModel.cpp	2020-01-25 18:12:05.945454726 +0000
@@ -36,7 +36,7 @@
 #define BOOST_THREAD_PROVIDES_FUTURE
 #include <boost/thread.hpp>
 #include <boost/thread/future.hpp>
-
+#include <boost/chrono.hpp>
 namespace std {
 	using boost::future;
 }
@@ -391,7 +391,7 @@
                 {
                     DJV_PRIVATE_PTR();
                     if (p.future.valid() &&
-                        p.future.wait_for(std::chrono::seconds(0)) == boost::future_status::ready)
+                        p.future.wait_for(boost::chrono::seconds(0)) == boost::future_status::ready)
                     {
                         p.futureTimer->stop();
 
--- lib/djvCore/LogSystem.cpp.orig	2020-01-25 18:22:17.662199709 +0000
+++ lib/djvCore/LogSystem.cpp	2020-01-25 18:23:19.417376156 +0000
@@ -43,8 +43,9 @@
 #include <iomanip>
 #include <iostream>
 #include <list>
-#include <mutex>
-#include <thread>
+#include <boost/thread.hpp>
+#include <boost/thread/mutex.hpp>
+
 
 namespace djv
 {
@@ -82,10 +83,10 @@
             std::vector<std::string> errors;
             std::shared_ptr<ListSubject<std::string> > errorsSubject;
             std::list<Message> queue;
-            std::condition_variable queueCV;
+            boost::condition_variable queueCV;
             std::list<Message> messages;
-            std::mutex mutex;
-            std::thread thread;
+            boost::mutex mutex;
+            boost::thread thread;
             std::atomic<bool> running;
             std::shared_ptr<Time::Timer> warningsAndErrorsTimer;
         };
--- lib/djvCore/TextSystem.cpp.orig	2020-01-25 18:28:48.441298664 +0000
+++ lib/djvCore/TextSystem.cpp	2020-01-25 18:30:25.180172333 +0000
@@ -40,7 +40,9 @@
 #include <djvCore/String.h>
 #include <djvCore/Timer.h>
 
-#include <future>
+#define BOOST_THREAD_PROVIDES_FUTURE
+#include <boost/thread.hpp>
+#include <boost/thread/future.hpp>
 #include <locale>
 #include <set>
 
@@ -63,8 +65,8 @@
             TextMap text;
             std::shared_ptr<ValueSubject<bool> > textChanged;
 
-            std::vector<std::future<TextMap> > readFutures;
-            std::future<std::vector<FileSystem::FileInfo> > statFuture;
+            std::vector<boost::future<TextMap> > readFutures;
+            boost::future<std::vector<FileSystem::FileInfo> > statFuture;
             std::shared_ptr<Time::Timer> timer;
         };
 
@@ -247,7 +249,7 @@
                         while (j != system->_p->readFutures.end())
                         {
                             if (j->valid() &&
-                                j->wait_for(std::chrono::seconds(0)) == std::future_status::ready)
+                                j->wait_for(std::chrono::seconds(0)) == boost::future_status::ready)
                             {
                                 for (const auto& k : j->get())
                                 {
@@ -272,7 +274,7 @@
                         bool stat = false;
                         if (system->_p->statFuture.valid())
                         {
-                            if (system->_p->statFuture.wait_for(std::chrono::seconds(0)) == std::future_status::ready)
+                            if (system->_p->statFuture.wait_for(std::chrono::seconds(0)) == boost::future_status::ready)
                             {
                                 auto textFiles = system->_p->statFuture.get();
                                 for (auto j = system->_p->textFiles.begin(), k = textFiles.begin();
--- lib/djvCore/DirectoryWatcherWin32.cpp.orig	2020-01-25 18:38:02.423102197 +0000
+++ lib/djvCore/DirectoryWatcherWin32.cpp	2020-01-25 18:40:37.825439435 +0000
@@ -38,8 +38,8 @@
 #include <codecvt>
 #include <condition_variable>
 #include <locale>
-#include <mutex>
-#include <thread>
+#include <boost/thread/mutex.hpp>
+#include <boost/thread.hpp>
 
 #ifndef WIN32_LEAN_AND_MEAN
 #define WIN32_LEAN_AND_MEAN
@@ -59,9 +59,9 @@
             {
                 Path path;
                 bool changed = false;
-                std::condition_variable changedCV;
-                std::mutex mutex;
-                std::thread thread;
+                boost::condition_variable changedCV;
+                boost::mutex mutex;
+                boost::thread thread;
                 std::atomic<bool> running = true;
                 std::function<void(void)> callback;
                 std::shared_ptr<Time::Timer> timer;
@@ -82,7 +82,7 @@
                     {
                         bool pathChanged = false;
                         {
-                            std::lock_guard<std::mutex> lock(p.mutex);
+                            boost::lock_guard<boost::mutex> lock(p.mutex);
                             if (p.path != path)
                             {
                                 path = p.path;
@@ -138,14 +138,14 @@
                             case WAIT_OBJECT_0:
                                 FindNextChangeNotification(changeHandle);
                                 {
-                                    std::lock_guard<std::mutex> lock(p.mutex);
+                                    boost::lock_guard<boost::mutex> lock(p.mutex);
                                     p.changed = true;
                                 }
                                 break;
                             }
                         }
 
-                        std::this_thread::sleep_for(timeout);
+                        boost::this_thread::sleep_for(timeout);
                     }
 
                     if (changeHandle)
@@ -163,7 +163,7 @@
                     DJV_PRIVATE_PTR();
                     bool changed = false;
                     {
-                        std::unique_lock<std::mutex> lock(p.mutex);
+                        boost::unique_lock<boost::mutex> lock(p.mutex);
                         if (p.changedCV.wait_for(
                             lock,
                             std::chrono::milliseconds(0),
@@ -215,7 +215,7 @@
                 if (value == p.path)
                     return;
                 {
-                    std::lock_guard<std::mutex> lock(p.mutex);
+                    boost::lock_guard<boost::mutex> lock(p.mutex);
                     p.path = value;
                     p.changed = true;
                 }
--- lib/djvCore/TextSystem.cpp.orig	2020-01-27 09:23:58.254213248 +0000
+++ lib/djvCore/TextSystem.cpp	2020-01-27 09:25:59.809011258 +0000
@@ -43,6 +43,7 @@
 #define BOOST_THREAD_PROVIDES_FUTURE
 #include <boost/thread.hpp>
 #include <boost/thread/future.hpp>
+#include <boost/chrono.hpp>
 #include <locale>
 #include <set>
 
@@ -249,7 +250,7 @@
                         while (j != system->_p->readFutures.end())
                         {
                             if (j->valid() &&
-                                j->wait_for(std::chrono::seconds(0)) == boost::future_status::ready)
+                                j->wait_for(boost::chrono::seconds(0)) == boost::future_status::ready)
                             {
                                 for (const auto& k : j->get())
                                 {
@@ -274,7 +275,7 @@
                         bool stat = false;
                         if (system->_p->statFuture.valid())
                         {
-                            if (system->_p->statFuture.wait_for(std::chrono::seconds(0)) == boost::future_status::ready)
+                            if (system->_p->statFuture.wait_for(boost::chrono::seconds(0)) == boost::future_status::ready)
                             {
                                 auto textFiles = system->_p->statFuture.get();
                                 for (auto j = system->_p->textFiles.begin(), k = textFiles.begin();
--- lib/djvCore/LogSystem.cpp.orig	2020-01-27 11:28:41.357233277 +0000
+++ lib/djvCore/LogSystem.cpp	2020-01-27 11:31:20.443645164 +0000
@@ -105,7 +105,7 @@
             p.errorsSubject = ListSubject<std::string>::create();
 
             p.running = true;
-            p.thread = std::thread(
+            p.thread = boost::thread(
                 [this]
             {
                 DJV_PRIVATE_PTR();
@@ -129,7 +129,7 @@
                 while (p.running)
                 {
                     {
-                        std::unique_lock<std::mutex> lock(p.mutex);
+                        boost::unique_lock<boost::mutex> lock(p.mutex);
                         p.queueCV.wait_for(
                             lock,
                             std::chrono::milliseconds(timeout),
@@ -142,7 +142,7 @@
                     _writeMessages();
                 }
                 {
-                    std::unique_lock<std::mutex> lock(p.mutex);
+                    boost::unique_lock<boost::mutex> lock(p.mutex);
                     p.messages = std::move(p.queue);
                 }
                 _writeMessages();
@@ -160,7 +160,7 @@
                         std::vector<std::string> warnings;
                         std::vector<std::string> errors;
                         {
-                            std::unique_lock<std::mutex> lock(system->_p->mutex);
+                            boost::unique_lock<boost::mutex> lock(system->_p->mutex);
                             warnings = std::move(system->_p->warnings);
                             errors = std::move(system->_p->errors);
                         }
@@ -201,7 +201,7 @@
         {
             DJV_PRIVATE_PTR();
             {
-                std::unique_lock<std::mutex> lock(p.mutex);
+                boost::unique_lock<boost::mutex> lock(p.mutex);
                 p.queue.push_back(Message(prefix, message, level));
             }
             p.queueCV.notify_one();
--- lib/djvCore/LogSystem.cpp.orig	2020-01-27 11:38:10.663545736 +0000
+++ lib/djvCore/LogSystem.cpp	2020-01-27 11:39:40.174650693 +0000
@@ -132,7 +132,7 @@
                         boost::unique_lock<boost::mutex> lock(p.mutex);
                         p.queueCV.wait_for(
                             lock,
-                            std::chrono::milliseconds(timeout),
+                            boost::chrono::milliseconds(timeout),
                             [this]
                         {
                             return _p->queue.size();
--- lib/djvCore/LogSystem.cpp.orig	2020-01-27 11:43:24.624818333 +0000
+++ lib/djvCore/LogSystem.cpp	2020-01-27 11:43:50.596617250 +0000
@@ -285,7 +285,7 @@
                 p.messages.clear();
                 if (warnings.size() || errors.size())
                 {
-                    std::unique_lock<std::mutex> lock(p.mutex);
+                    boost::unique_lock<boost::mutex> lock(p.mutex);
                     for (const auto& i : warnings)
                     {
                         p.warnings.push_back(i);
--- lib/djvCore/OSWin32.cpp.orig	2020-01-27 11:49:11.273869421 +0000
+++ lib/djvCore/OSWin32.cpp	2020-01-27 11:49:57.897445253 +0000
@@ -39,10 +39,10 @@
 #define NOMINMAX
 #endif // NOMINMAX
 #include <windows.h>
-#include <Shlobj.h>
+#include <shlobj.h>
 #include <shellapi.h>
 #include <stdlib.h>
-#include <VersionHelpers.h>
+#include <versionhelpers.h>
 
 #include <codecvt>
 #include <locale>
--- lib/djvCore/TextSystem.cpp.orig	2020-01-27 11:51:53.776377218 +0000
+++ lib/djvCore/TextSystem.cpp	2020-01-27 11:53:48.015310757 +0000
@@ -298,7 +298,7 @@
                         if (stat)
                         {
                             auto textFiles = system->_p->textFiles;
-                            system->_p->statFuture = std::async(
+                            system->_p->statFuture = boost::async(
                                 std::launch::async,
                                 [textFiles]
                                 {
@@ -405,7 +405,7 @@
             DJV_PRIVATE_PTR();
             auto weak = std::weak_ptr<TextSystem>(std::dynamic_pointer_cast<TextSystem>(shared_from_this()));
             auto fileInfo = value;
-            p.readFutures.push_back(std::async(
+            p.readFutures.push_back(boost::async(
                 std::launch::async,
                 [weak, fileInfo]
                 {
--- lib/djvCore/TextSystem.cpp.orig	2020-01-27 11:58:15.152782077 +0000
+++ lib/djvCore/TextSystem.cpp	2020-01-27 11:58:36.580552217 +0000
@@ -299,7 +299,7 @@
                         {
                             auto textFiles = system->_p->textFiles;
                             system->_p->statFuture = boost::async(
-                                std::launch::async,
+                                boost::launch::async,
                                 [textFiles]
                                 {
                                     std::vector<FileSystem::FileInfo> out;
@@ -406,7 +406,7 @@
             auto weak = std::weak_ptr<TextSystem>(std::dynamic_pointer_cast<TextSystem>(shared_from_this()));
             auto fileInfo = value;
             p.readFutures.push_back(boost::async(
-                std::launch::async,
+                boost::launch::async,
                 [weak, fileInfo]
                 {
                     TextMap out;
--- lib/djvCore/DirectoryWatcherWin32.cpp.orig	2020-01-27 12:08:16.518583046 +0000
+++ lib/djvCore/DirectoryWatcherWin32.cpp	2020-01-27 12:10:02.565525010 +0000
@@ -62,7 +62,7 @@
                 boost::condition_variable changedCV;
                 boost::mutex mutex;
                 boost::thread thread;
-                std::atomic<bool> running = true;
+                std::atomic<bool> running = { true };
                 std::function<void(void)> callback;
                 std::shared_ptr<Time::Timer> timer;
             };
--- lib/djvCore/DirectoryWatcherWin32.cpp.orig	2020-01-27 12:17:09.713313038 +0000
+++ lib/djvCore/DirectoryWatcherWin32.cpp	2020-01-27 12:17:35.193063533 +0000
@@ -72,7 +72,7 @@
                 DJV_PRIVATE_PTR();
                 const auto timeout = Time::getTime(Time::TimerValue::Medium);
                 auto contextWeak = std::weak_ptr<Context>(context);
-                _p->thread = std::thread(
+                _p->thread = boost::thread(
                     [this, timeout, contextWeak]
                 {
                     DJV_PRIVATE_PTR();
--- lib/djvCore/DirectoryWatcherWin32.cpp.orig	2020-01-27 12:21:47.558598900 +0000
+++ lib/djvCore/DirectoryWatcherWin32.cpp	2020-01-27 12:24:10.677205259 +0000
@@ -145,7 +145,7 @@
                             }
                         }
 
-                        boost::this_thread::sleep_for(timeout);
+                        boost::this_thread::sleep_for((boost::chrono::duration<long long int, boost::ratio<1, 1000000>>&)timeout);
                     }
 
                     if (changeHandle)
@@ -166,7 +166,7 @@
                         boost::unique_lock<boost::mutex> lock(p.mutex);
                         if (p.changedCV.wait_for(
                             lock,
-                            std::chrono::milliseconds(0),
+                            boost::chrono::milliseconds(0),
                             [this]
                         {
                             return _p->changed;
--- lib/djvCore/OSWin32.cpp.orig	2020-01-27 12:49:11.266413690 +0000
+++ lib/djvCore/OSWin32.cpp	2020-01-27 12:51:55.864802866 +0000
@@ -31,7 +31,8 @@
 
 #include <djvCore/FileInfo.h>
 #include <djvCore/Memory.h>
-
+#define NTDDI_VERSION 0x06000000
+#define _WIN32_WINNT 0x0600
 #ifndef WIN32_LEAN_AND_MEAN
 #define WIN32_LEAN_AND_MEAN
 #endif // WIN32_LEAN_AND_MEAN
--- lib/djvCore/CMakeLists.txt.orig	2020-01-27 12:58:37.528880701 +0000
+++ lib/djvCore/CMakeLists.txt	2020-01-27 12:58:58.916672088 +0000
@@ -139,7 +139,7 @@
     Threads::Threads
     ${CMAKE_DL_LIBS})
 if (WIN32)
-    set(LIBRARIES ${LIBRARIES} Netapi32.lib mpr.lib)
+    set(LIBRARIES ${LIBRARIES} netapi32.lib mpr.lib)
 elseif (APPLE)
     find_library(CORE_SERVICES CoreServices)
     set(LIBRARIES ${LIBRARIES} ${CORE_SERVICES})
--- lib/djvCore/CMakeLists.txt.orig	2020-01-27 13:03:40.633925635 +0000
+++ lib/djvCore/CMakeLists.txt	2020-01-27 13:05:17.208984584 +0000
@@ -139,7 +139,7 @@
     Threads::Threads
     ${CMAKE_DL_LIBS})
 if (WIN32)
-    set(LIBRARIES ${LIBRARIES} netapi32.lib mpr.lib)
+    set(LIBRARIES ${LIBRARIES} boost_thread-mt-x64 netapi32.lib mpr.lib)
 elseif (APPLE)
     find_library(CORE_SERVICES CoreServices)
     set(LIBRARIES ${LIBRARIES} ${CORE_SERVICES})
--- lib/djvCore/CMakeLists.txt.orig	2020-01-27 13:08:54.806399454 +0000
+++ lib/djvCore/CMakeLists.txt	2020-01-27 13:09:13.974160072 +0000
@@ -139,7 +139,7 @@
     Threads::Threads
     ${CMAKE_DL_LIBS})
 if (WIN32)
-    set(LIBRARIES ${LIBRARIES} boost_thread-mt-x64 netapi32.lib mpr.lib)
+    set(LIBRARIES ${LIBRARIES} boost_thread-mt-x64 boost_chrono-mt-x64 netapi32.lib mpr.lib)
 elseif (APPLE)
     find_library(CORE_SERVICES CoreServices)
     set(LIBRARIES ${LIBRARIES} ${CORE_SERVICES})
--- lib/djvCore/CMakeLists.txt.orig	2020-01-27 13:23:29.392459941 +0000
+++ lib/djvCore/CMakeLists.txt	2020-01-27 13:27:06.738151092 +0000
@@ -139,7 +139,7 @@
     Threads::Threads
     ${CMAKE_DL_LIBS})
 if (WIN32)
-    set(LIBRARIES ${LIBRARIES} boost_thread-mt-x64 boost_chrono-mt-x64 netapi32.lib mpr.lib)
+    set(LIBRARIES ${LIBRARIES} boost_thread-mt-x64 boost_chrono-mt-x64 msvcr120 netapi32.lib mpr.lib)
 elseif (APPLE)
     find_library(CORE_SERVICES CoreServices)
     set(LIBRARIES ${LIBRARIES} ${CORE_SERVICES})
--- tests/djvTestLib/TickTest.cpp.orig	2020-01-27 13:42:59.480416584 +0000
+++ tests/djvTestLib/TickTest.cpp	2020-01-27 13:45:17.559130821 +0000
@@ -31,7 +31,8 @@
 
 #include <djvCore/Context.h>
 
-#include <thread>
+#include <boost/thread.hpp>
+#include <boost/chrono.hpp>
 
 namespace djv
 {
@@ -44,7 +45,7 @@
         
         } // namespace
         
-        ITickTest::ITickTest(const std::string & name, const std::shared_ptr<Core::Context>& context) :
+        ITickTest::ITickTest(const std::string & name, const std::shared_ptr<Core::Context>& context) :
             ITest(name, context)
         {}
         
@@ -55,20 +56,20 @@
         {
             if (auto context = getContext().lock())
             {
-                auto time = std::chrono::steady_clock::now();
+                auto time = boost::chrono::steady_clock::now();
                 auto timeout = time + value;
                 Core::Time::Unit delta;
                 while (time < timeout)
                 {
                     context->tick(time, delta);
 
-                    auto t = std::chrono::steady_clock::now();
-                    delta = std::chrono::duration_cast<std::chrono::milliseconds>(t - time);
+                    auto t = boost::chrono::steady_clock::now();
+                    delta = boost::chrono::duration_cast<boost::chrono::milliseconds>(t - time);
                     const float sleep = 1 / static_cast<float>(frameRate) - delta.count();
-                    std::this_thread::sleep_for(std::chrono::milliseconds(static_cast<int>(sleep * 1000)));
+                    boost::this_thread::sleep_for(boost::chrono::milliseconds(static_cast<int>(sleep * 1000)));
                     
-                    t = std::chrono::steady_clock::now();
-                    delta = std::chrono::duration_cast<std::chrono::milliseconds>(t - time);
+                    t = boost::chrono::steady_clock::now();
+                    delta = boost::chrono::duration_cast<boost::chrono::milliseconds>(t - time);
                     time = t;
                 }
             }
--- lib/djvAV/IO.h.orig	2020-01-27 13:50:18.308245539 +0000
+++ lib/djvAV/IO.h	2020-01-27 13:54:20.309869307 +0000
@@ -41,9 +41,9 @@
 #include <djvCore/Time.h>
 #include <djvCore/ValueObserver.h>
 
-#include <future>
+#define BOOST_THREAD_PROVIDES_FUTURE
+#include <boost/thread.hpp>
 #include <queue>
-#include <mutex>
 #include <set>
 
 namespace djv
@@ -121,10 +121,10 @@
             {
             public:
                 VideoFrame();
-                VideoFrame(Core::Frame::Number, const std::shared_ptr<Image::Image>&);
+                VideoFrame(Core::Frame::Number, const std::shared_ptr<Image::Image>&);
 
                 Core::Frame::Number           frame = 0;
-                std::shared_ptr<Image::Image> image;
+                std::shared_ptr<Image::Image> image;
 
                 bool operator == (const VideoFrame&) const;
             };
@@ -161,9 +161,9 @@
             {
             public:
                 AudioFrame();
-                explicit AudioFrame(const std::shared_ptr<Audio::Data>&);
+                explicit AudioFrame(const std::shared_ptr<Audio::Data>&);
 
-                std::shared_ptr<Audio::Data> audio;
+                std::shared_ptr<Audio::Data> audio;
                 
                 bool operator == (const AudioFrame&) const;
             };
@@ -190,7 +190,7 @@
                 void setFinished(bool);
 
             private:
-                std::mutex _mutex;
+                boost::mutex _mutex;
                 size_t _max = 0;
                 std::queue<AudioFrame> _queue;
                 bool _finished = false;
@@ -211,8 +211,8 @@
                 void _init(
                     const Core::FileSystem::FileInfo&,
                     const IOOptions&,
-                    const std::shared_ptr<Core::ResourceSystem>&,
-                    const std::shared_ptr<Core::LogSystem>&);
+                    const std::shared_ptr<Core::ResourceSystem>&,
+                    const std::shared_ptr<Core::LogSystem>&);
 
             public:
                 virtual ~IIO() = 0;
@@ -222,16 +222,16 @@
                 size_t getThreadCount() const;
                 void setThreadCount(size_t);
 
-                std::mutex& getMutex();
+                boost::mutex& getMutex();
                 VideoQueue& getVideoQueue();
                 AudioQueue& getAudioQueue();
 
             protected:
-                std::shared_ptr<Core::LogSystem> _logSystem;
-                std::shared_ptr<Core::ResourceSystem> _resourceSystem;
-                std::shared_ptr<OCIO::System> _ocioSystem;
+                std::shared_ptr<Core::LogSystem> _logSystem;
+                std::shared_ptr<Core::ResourceSystem> _resourceSystem;
+                std::shared_ptr<OCIO::System> _ocioSystem;
                 Core::FileSystem::FileInfo _fileInfo;
-                std::mutex _mutex;
+                boost::mutex _mutex;
                 VideoQueue _videoQueue;
                 AudioQueue _audioQueue;
                 size_t _threadCount = 4;
@@ -291,8 +291,8 @@
                 void setCurrentFrame(Core::Frame::Index);
 
                 bool contains(Core::Frame::Index) const;
-                bool get(Core::Frame::Index, std::shared_ptr<AV::Image::Image>&) const;
-                void add(Core::Frame::Index, const std::shared_ptr<AV::Image::Image>&);
+                bool get(Core::Frame::Index, std::shared_ptr<AV::Image::Image>&) const;
+                void add(Core::Frame::Index, const std::shared_ptr<AV::Image::Image>&);
                 void clear();
 
             private:
@@ -306,7 +306,7 @@
                 //! \todo Should this be configurable?
                 size_t _readBehind = 10;
                 Core::Frame::Sequence _sequence;
-                std::map<Core::Frame::Index, std::shared_ptr<AV::Image::Image> > _cache;
+                std::map<Core::Frame::Index, std::shared_ptr<AV::Image::Image> > _cache;
             };
 
             //! This class provides an interface for reading.
@@ -316,8 +316,8 @@
                 void _init(
                     const Core::FileSystem::FileInfo&,
                     const ReadOptions&,
-                    const std::shared_ptr<Core::ResourceSystem>&,
-                    const std::shared_ptr<Core::LogSystem>&);
+                    const std::shared_ptr<Core::ResourceSystem>&,
+                    const std::shared_ptr<Core::LogSystem>&);
 
             public:
                 virtual ~IRead() = 0;
@@ -367,8 +367,8 @@
                     const Core::FileSystem::FileInfo &,
                     const Info &,
                     const WriteOptions&,
-                    const std::shared_ptr<Core::ResourceSystem>&,
-                    const std::shared_ptr<Core::LogSystem>&);
+                    const std::shared_ptr<Core::ResourceSystem>&,
+                    const std::shared_ptr<Core::LogSystem>&);
 
             public:
                 virtual ~IWrite() = 0;
@@ -386,7 +386,7 @@
                     const std::string& pluginName,
                     const std::string& pluginInfo,
                     const std::set<std::string>& fileExtensions,
-                    const std::shared_ptr<Core::Context>&);
+                    const std::shared_ptr<Core::Context>&);
 
             public:
                 virtual ~IPlugin() = 0;
@@ -407,16 +407,16 @@
 
                 //! Throws:
                 //! - Core::FileSystem::Error
-                virtual std::shared_ptr<IRead> read(const Core::FileSystem::FileInfo&, const ReadOptions&) const;
+                virtual std::shared_ptr<IRead> read(const Core::FileSystem::FileInfo&, const ReadOptions&) const;
 
                 //! Throws:
                 //! - Core::FileSystem::Error
-                virtual std::shared_ptr<IWrite> write(const Core::FileSystem::FileInfo&, const Info&, const WriteOptions&) const;
+                virtual std::shared_ptr<IWrite> write(const Core::FileSystem::FileInfo&, const Info&, const WriteOptions&) const;
 
             protected:
                 std::weak_ptr<Core::Context> _context;
-                std::shared_ptr<Core::LogSystem> _logSystem;
-                std::shared_ptr<Core::ResourceSystem> _resourceSystem;
+                std::shared_ptr<Core::LogSystem> _logSystem;
+                std::shared_ptr<Core::ResourceSystem> _resourceSystem;
                 std::string _pluginName;
                 std::string _pluginInfo;
                 std::set<std::string> _fileExtensions;
@@ -428,13 +428,13 @@
                 DJV_NON_COPYABLE(System);
 
             protected:
-                void _init(const std::shared_ptr<Core::Context>&);
+                void _init(const std::shared_ptr<Core::Context>&);
                 System();
 
             public:
                 virtual ~System();
 
-                static std::shared_ptr<System> create(const std::shared_ptr<Core::Context>&);
+                static std::shared_ptr<System> create(const std::shared_ptr<Core::Context>&);
 
                 std::set<std::string> getPluginNames() const;
                 std::set<std::string> getFileExtensions() const;
@@ -445,7 +445,7 @@
                 //! - std::invalid_argument
                 void setOptions(const std::string & pluginName, const picojson::value &);
 
-                std::shared_ptr<Core::IValueSubject<bool> > observeOptionsChanged() const;
+                std::shared_ptr<Core::IValueSubject<bool> > observeOptionsChanged() const;
 
                 const std::set<std::string>& getSequenceExtensions() const;
                 bool canSequence(const Core::FileSystem::FileInfo&) const;
@@ -454,11 +454,11 @@
 
                 //! Throws:
                 //! - Core::FileSystem::Error
-                std::shared_ptr<IRead> read(const Core::FileSystem::FileInfo&, const ReadOptions& = ReadOptions());
+                std::shared_ptr<IRead> read(const Core::FileSystem::FileInfo&, const ReadOptions& = ReadOptions());
 
                 //! Throws:
                 //! - Core::FileSystem::Error
-                std::shared_ptr<IWrite> write(const Core::FileSystem::FileInfo&, const Info &, const WriteOptions& = WriteOptions());
+                std::shared_ptr<IWrite> write(const Core::FileSystem::FileInfo&, const Info &, const WriteOptions& = WriteOptions());
 
             private:
                 DJV_PRIVATE();
--- tests/djvTestLib/TickTest.h.orig	2020-01-27 14:04:17.483903260 +0000
+++ tests/djvTestLib/TickTest.h	2020-01-27 14:04:55.283522896 +0000
@@ -33,6 +33,8 @@
 
 #include <djvCore/Time.h>
 
+#include <boost/thread.hpp>
+
 namespace djv
 {
     namespace Test
@@ -41,7 +43,7 @@
         class ITickTest : public ITest
         {
         public:
-            ITickTest(const std::string & name, const std::shared_ptr<Core::Context>&);
+            ITickTest(const std::string & name, const std::shared_ptr<Core::Context>&);
             virtual ~ITickTest() = 0;
 
         protected:
--- tests/djvTestLib/Test.h.orig	2020-01-27 14:09:27.968773806 +0000
+++ tests/djvTestLib/Test.h	2020-01-27 14:09:59.928451129 +0000
@@ -34,6 +34,7 @@
 #include <memory>
 #include <string>
 #include <vector>
+#include <boost/thread.hpp>
 
 namespace djv
 {
@@ -50,7 +51,7 @@
         class ITest
         {
         public:
-            ITest(const std::string & name, const std::shared_ptr<Core::Context>&);
+            ITest(const std::string & name, const std::shared_ptr<Core::Context>&);
             virtual ~ITest() = 0;
 
             const std::weak_ptr<Core::Context>& getContext() const;
--- lib/djvCore/Time.h.orig	2020-01-27 14:16:57.863989801 +0000
+++ lib/djvCore/Time.h	2020-01-27 14:17:42.403472286 +0000
@@ -31,7 +31,7 @@
 
 #include <djvCore/Rational.h>
 
-#include <chrono>
+#include <boost/chrono.hpp>
 #include <ctime>
 
 namespace djv
@@ -42,7 +42,7 @@
         namespace Time
         {
             //! This typedef provides the time units.
-            typedef std::chrono::microseconds Unit;
+            typedef boost::chrono::microseconds Unit;
 
             //! \name Time Conversion
             ///@{
--- lib/djvCore/Animation.cpp.orig	2020-01-27 14:22:02.588531487 +0000
+++ lib/djvCore/Animation.cpp	2020-01-27 14:23:37.215488892 +0000
@@ -32,7 +32,8 @@
 #include <djvCore/Context.h>
 #include <djvCore/Math.h>
 #include <djvCore/TextSystem.h>
-
+#include <boost/thread.hpp>
+#include <boost/chrono.hpp>
 #include <algorithm>
 
 //#pragma optimize("", off)
@@ -111,13 +112,13 @@
                 _active = false;
             }
 
-            void Animation::_tick(const std::chrono::steady_clock::time_point& tp, const Time::Unit&)
+            void Animation::_tick(const boost::chrono::steady_clock::time_point& tp, const Time::Unit&)
             {
                 _time = tp;
                 if (_active)
                 {
-                    const auto diff = std::chrono::duration<float>(tp - _start);
-                    const float t = Math::clamp(diff.count() / std::chrono::duration<float>(_duration).count(), 0.F, 1.F);
+                    const auto diff = boost::chrono::duration<float>(tp - _start);
+                    const float t = Math::clamp(diff.count() / boost::chrono::duration<float>(_duration).count(), 0.F, 1.F);
 
                     float v = 0.F;
                     if (_begin < _end)
@@ -155,7 +156,7 @@
                 std::vector<std::weak_ptr<Animation> > animations;
             };
 
-            void System::_init(const std::shared_ptr<Context>& context)
+            void System::_init(const std::shared_ptr<Context>& context)
             {
                 ISystem::_init("djv::Core::Animation::System", context);
                 addDependency(context->getSystemT<TextSystem>());
@@ -168,9 +169,9 @@
             System::~System()
             {}
 
-            std::shared_ptr<System> System::create(const std::shared_ptr<Context>& context)
+            std::shared_ptr<System> System::create(const std::shared_ptr<Context>& context)
             {
-                auto out = std::shared_ptr<System>(new System);
+                auto out = std::shared_ptr<System>(new System);
                 out->_init(context);
                 return out;
             }
--- lib/djvCore/Animation.h.orig	2020-01-27 14:35:18.475997952 +0000
+++ lib/djvCore/Animation.h	2020-01-27 14:37:15.190773631 +0000
@@ -33,7 +33,7 @@
 #include <djvCore/ISystem.h>
 #include <djvCore/Time.h>
 
-#include <chrono>
+#include <boost/chrono.hpp>
 #include <functional>
 
 namespace djv
@@ -70,12 +70,12 @@
             class Animation : public std::enable_shared_from_this<Animation>
             {
                 DJV_NON_COPYABLE(Animation);
-                void _init(const std::shared_ptr<Context>&);
+                void _init(const std::shared_ptr<Context>&);
                 Animation();
 
             public:
                 //! Create a new animation.
-                static std::shared_ptr<Animation> create(const std::shared_ptr<Context>&);
+                static std::shared_ptr<Animation> create(const std::shared_ptr<Context>&);
 
                 //! \name Animation Type
                 ///@{
@@ -110,7 +110,7 @@
                 void stop();
 
             private:
-                void _tick(const std::chrono::steady_clock::time_point&, const Time::Unit&);
+                void _tick(const boost::chrono::steady_clock::time_point&, const Time::Unit&);
 
                 Type                      _type        = Type::Linear;
                 Function                  _function;
@@ -121,8 +121,8 @@
                 Time::Unit                _duration    = Time::Unit::zero();
                 Callback                  _callback;
                 Callback                  _endCallback;
-                std::chrono::time_point<std::chrono::steady_clock> _time;
-                std::chrono::time_point<std::chrono::steady_clock> _start;
+                boost::chrono::time_point<boost::chrono::steady_clock> _time;
+                boost::chrono::time_point<boost::chrono::steady_clock> _start;
 
                 friend class System;
             };
@@ -131,15 +131,15 @@
             class System : public ISystem
             {
                 DJV_NON_COPYABLE(System);
-                void _init(const std::shared_ptr<Context>&);
+                void _init(const std::shared_ptr<Context>&);
                 System();
 
             public:
                 virtual ~System();
 
-                static std::shared_ptr<System> create(const std::shared_ptr<Context>&);
+                static std::shared_ptr<System> create(const std::shared_ptr<Context>&);
 
-                void tick(const std::chrono::steady_clock::time_point&, const Time::Unit&) override;
+                void tick(const boost::chrono::steady_clock::time_point&, const Time::Unit&) override;
 
             private:
                 void _addAnimation(const std::weak_ptr<Animation> &);
--- lib/djvCore/Animation.h.orig	2020-01-27 14:42:16.819623174 +0000
+++ lib/djvCore/Animation.h	2020-01-27 14:42:36.283420382 +0000
@@ -139,7 +139,7 @@
 
                 static std::shared_ptr<System> create(const std::shared_ptr<Context>&);
 
-                void tick(const boost::chrono::steady_clock::time_point&, const Time::Unit&) override;
+                void tick(const boost::chrono::steady_clock::time_point&, const Time::Unit&);
 
             private:
                 void _addAnimation(const std::weak_ptr<Animation> &);
--- lib/djvCore/CoreSystem.cpp.orig	2020-01-27 14:47:39.120270383 +0000
+++ lib/djvCore/CoreSystem.cpp	2020-01-27 14:49:23.343277904 +0000
@@ -33,6 +33,8 @@
 #include <djvCore/Context.h>
 #include <djvCore/Timer.h>
 
+#include <boost/thread.hpp>
+
 using namespace djv::Core;
 
 namespace djv
@@ -43,7 +45,7 @@
         {
         };
 
-        void CoreSystem::_init(const std::string&, const std::shared_ptr<Context>& context)
+        void CoreSystem::_init(const std::string&, const std::shared_ptr<Context>& context)
         {
             ISystem::_init("djv::Core::CoreSystem", context);
 
@@ -59,9 +61,9 @@
         CoreSystem::~CoreSystem()
         {}
 
-        std::shared_ptr<CoreSystem> CoreSystem::create(const std::string & argv0, const std::shared_ptr<Context>& context)
+        std::shared_ptr<CoreSystem> CoreSystem::create(const std::string & argv0, const std::shared_ptr<Context>& context)
         {
-            auto out = std::shared_ptr<CoreSystem>(new CoreSystem);
+            auto out = std::shared_ptr<CoreSystem>(new CoreSystem);
             out->_init(argv0, context);
             return out;
         }
--- lib/djvCore/CoreSystem.h.orig	2020-01-27 14:56:45.051541179 +0000
+++ lib/djvCore/CoreSystem.h	2020-01-27 14:57:30.619127084 +0000
@@ -30,6 +30,7 @@
 #pragma once
 
 #include <djvCore/ISystem.h>
+#include <boost/thread.hpp>
 
 namespace djv
 {
@@ -41,13 +42,13 @@
             DJV_NON_COPYABLE(CoreSystem);
 
         protected:
-            void _init(const std::string & argv0, const std::shared_ptr<Context>&);
+            void _init(const std::string & argv0, const std::shared_ptr<Context>&);
             CoreSystem();
 
         public:
             ~CoreSystem() override;
 
-            static std::shared_ptr<CoreSystem> create(const std::string & argv0, const std::shared_ptr<Context>&);
+            static std::shared_ptr<CoreSystem> create(const std::string & argv0, const std::shared_ptr<Context>&);
 
         private:
             DJV_PRIVATE();
--- lib/djvCore/Animation.cpp.orig	2020-01-27 15:02:28.976337547 +0000
+++ lib/djvCore/Animation.cpp	2020-01-27 15:03:42.039638643 +0000
@@ -61,16 +61,16 @@
                 return data[static_cast<size_t>(value)];
             }
 
-            void Animation::_init(const std::shared_ptr<Context>& context)
+            void Animation::_init(const std::shared_ptr<Context>& context)
             {
                 _function = getFunction(_type);
                 auto system = context->getSystemT<System>();
                 system->_addAnimation(shared_from_this());
             }
 
-            std::shared_ptr<Animation> Animation::create(const std::shared_ptr<Context>& context)
+            std::shared_ptr<Animation> Animation::create(const std::shared_ptr<Context>& context)
             {
-                auto out = std::shared_ptr<Animation>(new Animation);
+                auto out = std::shared_ptr<Animation>(new Animation);
                 out->_init(context);
                 return out;
             }
--- lib/djvCore/ISystem.h.orig	2020-01-27 15:08:48.476663838 +0000
+++ lib/djvCore/ISystem.h	2020-01-27 15:10:50.287467215 +0000
@@ -31,7 +31,8 @@
 
 #include <djvCore/Time.h>
 
-#include <chrono>
+#include <boost/chrono.hpp>
+#include <boost/thread.hpp>
 #include <memory>
 #include <string>
 #include <vector>
@@ -51,7 +52,7 @@
             DJV_NON_COPYABLE(ISystemBase);
             
         protected:
-            void _init(const std::string& name, const std::shared_ptr<Context>&);
+            void _init(const std::string& name, const std::shared_ptr<Context>&);
             ISystemBase();
 
         public:
@@ -64,18 +65,18 @@
             const std::weak_ptr<Context>& getContext() const;
 
             //! Get the list of system dependencies.
-            const std::vector<std::shared_ptr<ISystemBase> >& getDependencies() const;
+            const std::vector<std::shared_ptr<ISystemBase> >& getDependencies() const;
             
             //! Add a system dependency.
-            void addDependency(const std::shared_ptr<ISystemBase>&);
+            void addDependency(const std::shared_ptr<ISystemBase>&);
 
             //! Override this function to do work each frame.
-            virtual void tick(const std::chrono::steady_clock::time_point&, const Time::Unit&);
+            virtual void tick(const boost::chrono::steady_clock::time_point&, const Time::Unit&);
 
         private:
             std::string _name;
             std::weak_ptr<Context> _context;
-            std::vector<std::shared_ptr<ISystemBase> > _dependencies;
+            std::vector<std::shared_ptr<ISystemBase> > _dependencies;
         };
 
         //! This class provides the base functionality for systems.
@@ -84,7 +85,7 @@
             DJV_NON_COPYABLE(ISystem);
 
         protected:
-            void _init(const std::string& name, const std::shared_ptr<Context>&);
+            void _init(const std::string& name, const std::shared_ptr<Context>&);
             ISystem();
 
         public:
@@ -95,15 +96,15 @@
             void _log(const std::string& message, Core::LogLevel = Core::LogLevel::Information);
             
             //! Get the resource system.
-            std::shared_ptr<ResourceSystem> _getResourceSystem() const;
+	    std::shared_ptr<ResourceSystem> _getResourceSystem() const;
             
             //! Translate a text ID.
             const std::string& _getText(const std::string& id) const;
 
         private:
-            std::shared_ptr<LogSystem> _logSystem;
-            std::shared_ptr<ResourceSystem> _resourceSystem;
-            std::shared_ptr<TextSystem> _textSystem;
+            std::shared_ptr<LogSystem> _logSystem;
+            std::shared_ptr<ResourceSystem> _resourceSystem;
+            std::shared_ptr<TextSystem> _textSystem;
         };
 
     } // namespace Core
--- lib/djvCore/ISystemInline.h.orig	2020-01-27 15:16:17.384229618 +0000
+++ lib/djvCore/ISystemInline.h	2020-01-27 15:16:53.863866948 +0000
@@ -27,6 +27,8 @@
 // POSSIBILITY OF SUCH DAMAGE.
 //------------------------------------------------------------------------------
 
+#include <boost/thread.hpp>
+
 namespace djv
 {
     namespace Core
@@ -44,7 +46,7 @@
             return _context;
         }
 
-        inline const std::vector<std::shared_ptr<ISystemBase> > & ISystemBase::getDependencies() const
+        inline const std::vector<std::shared_ptr<ISystemBase> > & ISystemBase::getDependencies() const
         {
             return _dependencies;
         }
--- lib/djvCore/Timer.h.orig	2020-01-27 15:22:42.672389029 +0000
+++ lib/djvCore/Timer.h	2020-01-27 15:26:39.162237375 +0000
@@ -116,7 +116,7 @@
                 //! Create a new timer system.
                 static std::shared_ptr<TimerSystem> create(const std::shared_ptr<Context>&);
 
-                void tick(const std::chrono::steady_clock::time_point&, const Unit&) override;
+                void tick(const std::chrono::steady_clock::time_point&, const Unit&);
 
             private:
                 void _addTimer(const std::weak_ptr<Timer> &);
--- lib/djvCore/DirectoryModel.cpp.orig	2020-01-27 15:45:24.847449055 +0000
+++ lib/djvCore/DirectoryModel.cpp	2020-01-27 15:46:25.782853050 +0000
@@ -37,9 +37,6 @@
 #include <boost/thread.hpp>
 #include <boost/thread/future.hpp>
 #include <boost/chrono.hpp>
-namespace std {
-	using boost::future;
-}
 
 namespace djv
 {
--- lib/djvCore/Animation.h.orig	2020-01-27 16:12:15.155623830 +0000
+++ lib/djvCore/Animation.h	2020-01-27 16:13:24.078945165 +0000
@@ -33,7 +33,7 @@
 #include <djvCore/ISystem.h>
 #include <djvCore/Time.h>
 
-#include <boost/chrono.hpp>
+#include <chrono>
 #include <functional>
 
 namespace djv
@@ -110,7 +110,7 @@
                 void stop();
 
             private:
-                void _tick(const boost::chrono::steady_clock::time_point&, const Time::Unit&);
+                void _tick(const std::chrono::steady_clock::time_point&, const Time::Unit&);
 
                 Type                      _type        = Type::Linear;
                 Function                  _function;
@@ -121,8 +121,8 @@
                 Time::Unit                _duration    = Time::Unit::zero();
                 Callback                  _callback;
                 Callback                  _endCallback;
-                boost::chrono::time_point<boost::chrono::steady_clock> _time;
-                boost::chrono::time_point<boost::chrono::steady_clock> _start;
+                std::chrono::time_point<std::chrono::steady_clock> _time;
+                std::chrono::time_point<std::chrono::steady_clock> _start;
 
                 friend class System;
             };
@@ -139,7 +139,7 @@
 
                 static std::shared_ptr<System> create(const std::shared_ptr<Context>&);
 
-                void tick(const boost::chrono::steady_clock::time_point&, const Time::Unit&);
+                void tick(const std::chrono::steady_clock::time_point&, const Time::Unit&);
 
             private:
                 void _addAnimation(const std::weak_ptr<Animation> &);
--- lib/djvCore/Animation.cpp.orig	2020-01-27 16:17:19.183636053 +0000
+++ lib/djvCore/Animation.cpp	2020-01-27 16:18:12.706875407 +0000
@@ -33,7 +33,7 @@
 #include <djvCore/Math.h>
 #include <djvCore/TextSystem.h>
 #include <boost/thread.hpp>
-#include <boost/chrono.hpp>
+#include <chrono>
 #include <algorithm>
 
 //#pragma optimize("", off)
@@ -112,13 +112,13 @@
                 _active = false;
             }
 
-            void Animation::_tick(const boost::chrono::steady_clock::time_point& tp, const Time::Unit&)
+            void Animation::_tick(const std::chrono::steady_clock::time_point& tp, const Time::Unit&)
             {
                 _time = tp;
                 if (_active)
                 {
-                    const auto diff = boost::chrono::duration<float>(tp - _start);
-                    const float t = Math::clamp(diff.count() / boost::chrono::duration<float>(_duration).count(), 0.F, 1.F);
+                    const auto diff = std::chrono::duration<float>(tp - _start);
+                    const float t = Math::clamp(diff.count() / std::chrono::duration<float>(_duration).count(), 0.F, 1.F);
 
                     float v = 0.F;
                     if (_begin < _end)
--- lib/djvCore/Time.h.orig	2020-01-27 16:39:22.435703256 +0000
+++ lib/djvCore/Time.h	2020-01-27 16:39:48.123420717 +0000
@@ -31,7 +31,7 @@
 
 #include <djvCore/Rational.h>
 
-#include <boost/chrono.hpp>
+#include <chrono>
 #include <ctime>
 
 namespace djv
@@ -42,7 +42,7 @@
         namespace Time
         {
             //! This typedef provides the time units.
-            typedef boost::chrono::microseconds Unit;
+            typedef std::chrono::microseconds Unit;
 
             //! \name Time Conversion
             ///@{
--- lib/djvCore/ISystem.h.orig	2020-01-27 16:43:52.908743158 +0000
+++ lib/djvCore/ISystem.h	2020-01-27 16:44:26.120381573 +0000
@@ -31,7 +31,7 @@
 
 #include <djvCore/Time.h>
 
-#include <boost/chrono.hpp>
+#include <chrono>
 #include <boost/thread.hpp>
 #include <memory>
 #include <string>
@@ -71,7 +71,7 @@
             void addDependency(const std::shared_ptr<ISystemBase>&);
 
             //! Override this function to do work each frame.
-            virtual void tick(const boost::chrono::steady_clock::time_point&, const Time::Unit&);
+            virtual void tick(const std::chrono::steady_clock::time_point&, const Time::Unit&);
 
         private:
             std::string _name;
--- lib/djvCore/DirectoryModel.cpp.orig	2020-01-27 16:48:27.297798274 +0000
+++ lib/djvCore/DirectoryModel.cpp	2020-01-27 16:50:26.249080600 +0000
@@ -35,8 +35,8 @@
 #include <djvCore/OS.h>
 #define BOOST_THREAD_PROVIDES_FUTURE
 #include <boost/thread.hpp>
-#include <boost/thread/future.hpp>
-#include <boost/chrono.hpp>
+/* #include <boost/thread/future.hpp> */
+/* #include <boost/chrono.hpp> */
 
 namespace djv
 {
@@ -388,7 +388,7 @@
                 {
                     DJV_PRIVATE_PTR();
                     if (p.future.valid() &&
-                        p.future.wait_for(boost::chrono::seconds(0)) == boost::future_status::ready)
+                        p.future.wait_for(std::chrono::seconds(0)) == std::future_status::ready)
                     {
                         p.futureTimer->stop();
 
--- lib/djvCore/DirectoryModel.cpp.orig	2020-01-27 16:55:17.938955713 +0000
+++ lib/djvCore/DirectoryModel.cpp	2020-01-27 17:03:32.706670934 +0000
@@ -33,9 +33,9 @@
 #include <djvCore/FileInfo.h>
 #include <djvCore/Timer.h>
 #include <djvCore/OS.h>
-#define BOOST_THREAD_PROVIDES_FUTURE
+#define BOOST_THREAD_PROVIDES_FUTURE 5
 #include <boost/thread.hpp>
-/* #include <boost/thread/future.hpp> */
+#include <boost/thread/future.hpp>
 /* #include <boost/chrono.hpp> */
 
 namespace djv
@@ -63,7 +63,7 @@
                 std::shared_ptr<ValueSubject<bool> > reverseSort;
                 std::shared_ptr<ValueSubject<bool> > sortDirectoriesFirst;
                 std::shared_ptr<ValueSubject<std::string> > filter;
-                boost::future<std::pair<std::vector<FileInfo>, std::vector<std::string> > > future;
+		boost::future<std::pair<std::vector<FileInfo>, std::vector<std::string> > > future;
                 std::shared_ptr<Time::Timer> futureTimer;
                 std::shared_ptr<DirectoryWatcher> directoryWatcher;
             };
--- lib/djvCore/DirectoryModel.cpp.orig	2020-01-27 17:09:17.295442535 +0000
+++ lib/djvCore/DirectoryModel.cpp	2020-01-27 17:10:33.958709884 +0000
@@ -36,7 +36,11 @@
 #define BOOST_THREAD_PROVIDES_FUTURE 5
 #include <boost/thread.hpp>
 #include <boost/thread/future.hpp>
-/* #include <boost/chrono.hpp> */
+#include <boost/chrono.hpp>
+
+namespace std {
+	using boost::future;
+}
 
 namespace djv
 {
--- lib/djvCore/ISystem.h.orig	2020-01-27 17:15:50.099654450 +0000
+++ lib/djvCore/ISystem.h	2020-01-27 17:16:24.203322361 +0000
@@ -32,6 +32,7 @@
 #include <djvCore/Time.h>
 
 #include <chrono>
+#define BOOST_THREAD_PROVIDES_FUTURE 5
 #include <boost/thread.hpp>
 #include <memory>
 #include <string>
--- lib/djvCore/DirectoryModel.cpp.orig	2020-01-27 17:21:44.424188933 +0000
+++ lib/djvCore/DirectoryModel.cpp	2020-01-27 17:22:18.903850266 +0000
@@ -392,7 +392,7 @@
                 {
                     DJV_PRIVATE_PTR();
                     if (p.future.valid() &&
-                        p.future.wait_for(std::chrono::seconds(0)) == std::future_status::ready)
+                        p.future.wait_for(std::chrono::seconds(0)) == boost::future_status::ready)
                     {
                         p.futureTimer->stop();
 
 
--- lib/djvCore/DirectoryModel.cpp.orig	2020-01-27 17:49:41.190330239 +0000
+++ lib/djvCore/DirectoryModel.cpp	2020-01-27 17:50:04.990087379 +0000
@@ -392,7 +392,7 @@
                 {
                     DJV_PRIVATE_PTR();
                     if (p.future.valid() &&
-                        p.future.wait_for(std::chrono::seconds(0)) == boost::future_status::ready)
+                        p.future.wait_for(boost::chrono::seconds(0)) == boost::future_status::ready)
                     {
                         p.futureTimer->stop();
 
--- lib/djvAV/IOInline.h.orig	2020-01-27 17:56:53.385915579 +0000
+++ lib/djvAV/IOInline.h	2020-01-27 17:58:32.312832587 +0000
@@ -27,6 +27,10 @@
 // POSSIBILITY OF SUCH DAMAGE.
 //------------------------------------------------------------------------------
 
+#define BOOST_THREAD PROVIDES FUTURE
+#include <boost/thread.hpp>
+#include <boost/thread/future.hpp>
+
 namespace djv
 {
     namespace AV
@@ -183,7 +187,7 @@
                 return _threadCount;
             }
 
-            inline std::mutex& IIO::getMutex()
+            inline boost::mutex& IIO::getMutex()
             {
                 return _mutex;
             }
--- lib/djvAV/ThumbnailSystem.h.orig	2020-01-27 18:00:15.815712762 +0000
+++ lib/djvAV/ThumbnailSystem.h	2020-01-27 18:01:08.551146615 +0000
@@ -34,8 +34,10 @@
 #include <djvCore/ISystem.h>
 #include <djvCore/UID.h>
 #include <djvCore/Vector.h>
+#define BOOST_THREAD_PROVIDES_FUTURE
 
-#include <future>
+#include <boost/thread.hpp>
+#include <boost/thread/future.hpp>
 
 namespace djv
 {
--- lib/djvAV/ThumbnailSystem.h.orig	2020-01-27 18:06:14.923901521 +0000
+++ lib/djvAV/ThumbnailSystem.h	2020-01-27 18:07:15.819263326 +0000
@@ -95,8 +95,8 @@
             struct InfoFuture
             {
                 InfoFuture();
-                InfoFuture(std::future<IO::Info> &, Core::UID);
-                std::future<IO::Info> future;
+                InfoFuture(boost::future<IO::Info> &, Core::UID);
+                boost::future<IO::Info> future;
                 Core::UID uid = 0;
             };
             
@@ -110,8 +110,8 @@
             struct ImageFuture
             {
                 ImageFuture();
-                ImageFuture(std::future<std::shared_ptr<Image::Image> > &, Core::UID);
-                std::future<std::shared_ptr<Image::Image> > future;
+                ImageFuture(boost::future<std::shared_ptr<Image::Image> > &, Core::UID);
+                boost::future<std::shared_ptr<Image::Image> > future;
                 Core::UID uid = 0;
             };
 
--- CMakeLists.txt.orig	2020-01-27 18:12:12.412175893 +0000
+++ CMakeLists.txt	2020-01-27 18:12:20.592091130 +0000
@@ -94,7 +94,7 @@
 set(INCLUDE_DIRS
     ${CMAKE_SOURCE_DIR}/lib
     ${CMAKE_SOURCE_DIR}/bin
-    ${CMAKE_SOURCE_DIR}/tests
+    #${CMAKE_SOURCE_DIR}/tests
     ${CMAKE_SOURCE_DIR}/third-party)
 if(DJV_PYTHON)
     set(INCLUDE_DIRS
--- CMakeLists.txt.orig	2020-01-27 18:17:41.356778153 +0000
+++ CMakeLists.txt	2020-01-27 18:17:57.300613923 +0000
@@ -344,7 +344,7 @@
 
 add_subdirectory(third-party)
 add_subdirectory(lib)
-add_subdirectory(tests)
+#add_subdirectory(tests)
 if(NOT DJV_BUILD_TINY)
     if(DJV_BUILD_BIN)
         add_subdirectory(bin)
--- lib/djvAV/IO.h.orig	2020-01-27 18:18:41.188162024 +0000
+++ lib/djvAV/IO.h	2020-01-27 18:19:27.259687884 +0000
@@ -43,6 +43,7 @@
 
 #define BOOST_THREAD_PROVIDES_FUTURE
 #include <boost/thread.hpp>
+#include <boost/thread/future.hpp>
 #include <queue>
 #include <set>
 
@@ -322,7 +323,7 @@
             public:
                 virtual ~IRead() = 0;
 
-                virtual std::future<Info> getInfo() = 0;
+                virtual boost::future<Info> getInfo() = 0;
 
                 void setPlayback(bool);
                 void setInOutPoints(const InOutPoints&);
--- lib/djvAV/SequenceIO.h.orig	2020-01-27 18:20:18.131164614 +0000
+++ lib/djvAV/SequenceIO.h	2020-01-27 18:21:19.790530718 +0000
@@ -32,6 +32,9 @@
 #include <djvAV/IO.h>
 
 #include <djvCore/Frame.h>
+#define BOOST_THREAD_PROVIDES_FUTURE
+#include <boost/thread.hpp>
+#include <boost/thread/future.hpp>
 
 namespace djv
 {
@@ -56,7 +59,7 @@
                 virtual ~ISequenceRead() override = 0;
 
                 bool isRunning() const override;
-                std::future<Info> getInfo() override;
+                boost::future<Info> getInfo() override;
                 void seek(int64_t, Direction) override;
                 bool hasCache() const override { return true; }
 
@@ -72,7 +75,7 @@
                 bool _hasWork() const;
                 size_t _getQueueCount(size_t threadCount) const;
                 struct Future;
-                std::future<Future> _getFuture(Core::Frame::Number, std::string fileName);
+                boost::future<Future> _getFuture(Core::Frame::Number, std::string fileName);
                 size_t _readQueue(size_t count, bool cacheEnabled);
                 void _readCache(size_t count, const AV::IO::InOutPoints&);
 
--- lib/djvAV/FontSystem.cpp.orig	2020-01-27 18:26:02.463628385 +0000
+++ lib/djvAV/FontSystem.cpp	2020-01-27 18:34:03.011073485 +0000
@@ -46,8 +46,9 @@
 #include <condition_variable>
 #include <cwctype>
 #include <locale>
-#include <mutex>
-#include <thread>
+#define BOOST_THREAD_PROVIDES_FUTURE
+#include <boost/thread.hpp>
+#include <boost/thread/future.hpp>
 
 using namespace djv::Core;
 
@@ -71,7 +72,7 @@
                     MetricsRequest & operator = (MetricsRequest &&) = default;
 
                     Info info;
-                    std::promise<Metrics> promise;
+                    boost::promise<Metrics> promise;
                 };
 
                 class MeasureRequest
@@ -84,7 +85,7 @@
                     std::string text;
                     Info info;
                     uint16_t maxLineWidth = std::numeric_limits<uint16_t>::max();
-                    std::promise<glm::vec2> promise;
+                    boost::promise<glm::vec2> promise;
                 };
 
                 class MeasureGlyphsRequest
@@ -97,7 +98,7 @@
                     std::string text;
                     Info info;
                     uint16_t maxLineWidth = std::numeric_limits<uint16_t>::max();
-                    std::promise<std::vector<BBox2f> > promise;
+                    boost::promise<std::vector<BBox2f> > promise;
                 };
 
                 class GlyphsRequest
@@ -110,7 +111,7 @@
                     std::string text;
                     Info info;
                     bool cacheOnly = false;
-                    std::promise<std::vector<std::shared_ptr<Glyph> > > promise;
+                    boost::promise<std::vector<std::shared_ptr<Glyph> > > promise;
                 };
 
                 class TextLinesRequest
@@ -123,7 +124,7 @@
                     std::string text;
                     Info info;
                     uint16_t maxLineWidth = std::numeric_limits<uint16_t>::max();
-                    std::promise<std::vector<TextLine> > promise;
+                    boost::promise<std::vector<TextLine> > promise;
                 };
 
                 constexpr bool isSpace(djv_char_t c)
@@ -176,7 +177,7 @@
                 std::map<FamilyID, std::string> fontFileNames;
                 std::map<FamilyID, std::string> fontNames;
                 std::shared_ptr<MapSubject<FamilyID, std::string> > fontNamesSubject;
-                std::mutex fontNamesMutex;
+                boost::mutex fontNamesMutex;
                 std::shared_ptr<Time::Timer> fontNamesTimer;
                 std::map<FamilyID, std::map<FaceID, std::string> > fontFaceNames;
                 std::map<FamilyID, std::map<FaceID, FT_Face> > fontFaces;
@@ -187,7 +188,7 @@
                 std::list<GlyphsRequest> glyphsQueue;
                 std::list<TextLinesRequest> textLinesQueue;
                 std::condition_variable requestCV;
-                std::mutex requestMutex;
+                boost::mutex requestMutex;
                 std::list<MetricsRequest> metricsRequests;
                 std::list<MeasureRequest> measureRequests;
                 std::list<MeasureGlyphsRequest> measureGlyphsRequests;
@@ -200,7 +201,7 @@
                 std::atomic<float> glyphCachePercentageUsed;
 
                 std::shared_ptr<Time::Timer> statsTimer;
-                std::thread thread;
+                boost::thread thread;
                 std::atomic<bool> running;
 
                 bool getText(const std::string&, const Info&, std::basic_string<djv_char_t>&, FT_Face&, std::string& error);
@@ -256,7 +257,7 @@
                 });
 
                 p.running = true;
-                p.thread = std::thread(
+                p.thread = boost::thread(
                     [this]
                 {
                     DJV_PRIVATE_PTR();
@@ -264,7 +265,7 @@
                     while (p.running)
                     {
                         {
-                            std::unique_lock<std::mutex> lock(p.requestMutex);
+                            boost::unique_lock<boost::mutex> lock(p.requestMutex);
                             p.requestCV.wait_for(
                                 lock,
                                 Time::getTime(Time::TimerValue::Fast),
@@ -334,21 +335,21 @@
                 return _p->fontNamesSubject;
             }
 
-            std::future<Metrics> System::getMetrics(const Info & info)
+            boost::future<Metrics> System::getMetrics(const Info & info)
             {
                 DJV_PRIVATE_PTR();
                 MetricsRequest request;
                 request.info = info;
                 auto future = request.promise.get_future();
                 {
-                    std::unique_lock<std::mutex> lock(p.requestMutex);
+                    boost::unique_lock<boost::mutex> lock(p.requestMutex);
                     p.metricsQueue.push_back(std::move(request));
                 }
                 p.requestCV.notify_one();
                 return future;
             }
 
-            std::future<glm::vec2> System::measure(const std::string& text, const Info& info)
+            boost::future<glm::vec2> System::measure(const std::string& text, const Info& info)
             {
                 DJV_PRIVATE_PTR();
                 MeasureRequest request;
@@ -356,14 +357,14 @@
                 request.info = info;
                 auto future = request.promise.get_future();
                 {
-                    std::unique_lock<std::mutex> lock(p.requestMutex);
+                    boost::unique_lock<std::mutex> lock(p.requestMutex);
                     p.measureQueue.push_back(std::move(request));
                 }
                 p.requestCV.notify_one();
                 return future;
             }
 
-            std::future<std::vector<BBox2f> > System::measureGlyphs(const std::string& text, const Info& info)
+            boost::future<std::vector<BBox2f> > System::measureGlyphs(const std::string& text, const Info& info)
             {
                 DJV_PRIVATE_PTR();
                 MeasureGlyphsRequest request;
@@ -371,14 +372,14 @@
                 request.info = info;
                 auto future = request.promise.get_future();
                 {
-                    std::unique_lock<std::mutex> lock(p.requestMutex);
+                    boost::unique_lock<boost::mutex> lock(p.requestMutex);
                     p.measureGlyphsQueue.push_back(std::move(request));
                 }
                 p.requestCV.notify_one();
                 return future;
             }
 
-            std::future<std::vector<std::shared_ptr<Glyph> > > System::getGlyphs(const std::string& text, const Info& info)
+            boost::future<std::vector<std::shared_ptr<Glyph> > > System::getGlyphs(const std::string& text, const Info& info)
             {
                 DJV_PRIVATE_PTR();
                 GlyphsRequest request;
@@ -386,14 +387,14 @@
                 request.info = info;
                 auto future = request.promise.get_future();
                 {
-                    std::unique_lock<std::mutex> lock(p.requestMutex);
+                    boost::unique_lock<boost::mutex> lock(p.requestMutex);
                     p.glyphsQueue.push_back(std::move(request));
                 }
                 p.requestCV.notify_one();
                 return future;
             }
 
-            std::future<std::vector<TextLine> > System::textLines(const std::string& text, uint16_t maxLineWidth, const Info& info)
+            boost::future<std::vector<TextLine> > System::textLines(const std::string& text, uint16_t maxLineWidth, const Info& info)
             {
                 DJV_PRIVATE_PTR();
                 TextLinesRequest request;
@@ -402,7 +403,7 @@
                 request.maxLineWidth = maxLineWidth;
                 auto future = request.promise.get_future();
                 {
-                    std::unique_lock<std::mutex> lock(p.requestMutex);
+                    boost::unique_lock<boost::mutex> lock(p.requestMutex);
                     p.textLinesQueue.push_back(std::move(request));
                 }
                 p.requestCV.notify_one();
@@ -417,7 +418,7 @@
                 request.info = info;
                 request.cacheOnly = true;
                 {
-                    std::unique_lock<std::mutex> lock(p.requestMutex);
+                    boost::unique_lock<boost::mutex> lock(p.requestMutex);
                     p.glyphsQueue.push_back(std::move(request));
                 }
                 p.requestCV.notify_one();
--- lib/djvAV/FontSystem.cpp.orig	2020-01-27 18:38:33.428650104 +0000
+++ lib/djvAV/FontSystem.cpp	2020-01-27 18:39:44.903988128 +0000
@@ -187,7 +187,7 @@
                 std::list<MeasureGlyphsRequest> measureGlyphsQueue;
                 std::list<GlyphsRequest> glyphsQueue;
                 std::list<TextLinesRequest> textLinesQueue;
-                std::condition_variable requestCV;
+                boost::condition_variable requestCV;
                 boost::mutex requestMutex;
                 std::list<MetricsRequest> metricsRequests;
                 std::list<MeasureRequest> measureRequests;
@@ -238,7 +238,7 @@
                     DJV_PRIVATE_PTR();
                     std::map<FamilyID, std::string> fontNames;
                     {
-                        std::unique_lock<std::mutex> lock(p.fontNamesMutex);
+                        boost::unique_lock<boost::mutex> lock(p.fontNamesMutex);
                         fontNames = p.fontNames;
                     }
                     p.fontNamesSubject->setIfChanged(fontNames);
@@ -357,7 +357,7 @@
                 request.info = info;
                 auto future = request.promise.get_future();
                 {
-                    boost::unique_lock<std::mutex> lock(p.requestMutex);
+                    boost::unique_lock<boost::mutex> lock(p.requestMutex);
                     p.measureQueue.push_back(std::move(request));
                 }
                 p.requestCV.notify_one();
--- lib/djvAV/FontSystem.cpp.orig	2020-01-27 18:49:48.222201495 +0000
+++ lib/djvAV/FontSystem.cpp	2020-01-27 18:50:00.306083271 +0000
@@ -43,7 +43,6 @@
 
 #include <atomic>
 #include <codecvt>
-#include <condition_variable>
 #include <cwctype>
 #include <locale>
 #define BOOST_THREAD_PROVIDES_FUTURE
--- lib/djvAV/FontSystem.cpp.orig	2020-01-27 18:55:20.638931734 +0000
+++ lib/djvAV/FontSystem.cpp	2020-01-27 18:56:34.402202342 +0000
@@ -232,7 +232,7 @@
                 p.fontNamesTimer->setRepeating(true);
                 p.fontNamesTimer->start(
                     Time::getTime(Time::TimerValue::Medium),
-                    [this](const std::chrono::steady_clock::time_point&, const Time::Unit&)
+                    [this](const boost::chrono::steady_clock::time_point&, const Time::Unit&)
                 {
                     DJV_PRIVATE_PTR();
                     std::map<FamilyID, std::string> fontNames;
@@ -247,7 +247,7 @@
                 p.statsTimer->setRepeating(true);
                 p.statsTimer->start(
                     Time::getTime(Time::TimerValue::VerySlow),
-                    [this](const std::chrono::steady_clock::time_point&, const Time::Unit&)
+                    [this](const boost::chrono::steady_clock::time_point&, const Time::Unit&)
                 {
                     DJV_PRIVATE_PTR();
                     std::stringstream ss;
--- lib/djvCore/Time.h.orig	2020-01-27 20:27:09.698076402 +0000
+++ lib/djvCore/Time.h	2020-01-27 20:27:55.873584872 +0000
@@ -31,7 +31,7 @@
 
 #include <djvCore/Rational.h>
 
-#include <chrono>
+#include <boost/chrono.hpp>
 #include <ctime>
 
 namespace djv
@@ -42,7 +42,7 @@
         namespace Time
         {
             //! This typedef provides the time units.
-            typedef std::chrono::microseconds Unit;
+            typedef boost::chrono::microseconds Unit;
 
             //! \name Time Conversion
             ///@{
--- lib/djvCore/ISystem.h.orig	2020-01-27 20:35:48.096608350 +0000
+++ lib/djvCore/ISystem.h	2020-01-27 20:36:27.592195012 +0000
@@ -31,7 +31,7 @@
 
 #include <djvCore/Time.h>
 
-#include <chrono>
+#include <boost/chrono.hpp>
 #define BOOST_THREAD_PROVIDES_FUTURE 5
 #include <boost/thread.hpp>
 #include <memory>
@@ -72,7 +72,7 @@
             void addDependency(const std::shared_ptr<ISystemBase>&);
 
             //! Override this function to do work each frame.
-            virtual void tick(const std::chrono::steady_clock::time_point&, const Time::Unit&);
+            virtual void tick(const boost::chrono::steady_clock::time_point&, const Time::Unit&);
 
         private:
             std::string _name;
--- lib/djvCore/Animation.cpp.orig	2020-01-27 20:41:17.341170613 +0000
+++ lib/djvCore/Animation.cpp	2020-01-27 20:42:19.652521625 +0000
@@ -33,7 +33,7 @@
 #include <djvCore/Math.h>
 #include <djvCore/TextSystem.h>
 #include <boost/thread.hpp>
-#include <chrono>
+#include <boost/chrono.hpp>
 #include <algorithm>
 
 //#pragma optimize("", off)
@@ -112,13 +112,13 @@
                 _active = false;
             }
 
-            void Animation::_tick(const std::chrono::steady_clock::time_point& tp, const Time::Unit&)
+            void Animation::_tick(const boost::chrono::steady_clock::time_point& tp, const Time::Unit&)
             {
                 _time = tp;
                 if (_active)
                 {
-                    const auto diff = std::chrono::duration<float>(tp - _start);
-                    const float t = Math::clamp(diff.count() / std::chrono::duration<float>(_duration).count(), 0.F, 1.F);
+                    const auto diff = boost::chrono::duration<float>(tp - _start);
+                    const float t = Math::clamp(diff.count() / boost::chrono::duration<float>(_duration).count(), 0.F, 1.F);
 
                     float v = 0.F;
                     if (_begin < _end)
@@ -176,7 +176,7 @@
                 return out;
             }
 
-            void System::tick(const std::chrono::steady_clock::time_point& tp, const Time::Unit& dt)
+            void System::tick(const boost::chrono::steady_clock::time_point& tp, const Time::Unit& dt)
             {
                 DJV_PRIVATE_PTR();
                 auto i = p.animations.begin();
--- lib/djvCore/Animation.h.orig	2020-01-27 20:46:43.097781484 +0000
+++ lib/djvCore/Animation.h	2020-01-27 20:47:43.181204593 +0000
@@ -33,7 +33,7 @@
 #include <djvCore/ISystem.h>
 #include <djvCore/Time.h>
 
-#include <chrono>
+#include <boost/chrono.hpp>
 #include <functional>
 
 namespace djv
@@ -110,7 +110,7 @@
                 void stop();
 
             private:
-                void _tick(const std::chrono::steady_clock::time_point&, const Time::Unit&);
+                void _tick(const boost::chrono::steady_clock::time_point&, const Time::Unit&);
 
                 Type                      _type        = Type::Linear;
                 Function                  _function;
@@ -121,8 +121,8 @@
                 Time::Unit                _duration    = Time::Unit::zero();
                 Callback                  _callback;
                 Callback                  _endCallback;
-                std::chrono::time_point<std::chrono::steady_clock> _time;
-                std::chrono::time_point<std::chrono::steady_clock> _start;
+                boost::chrono::time_point<boost::chrono::steady_clock> _time;
+                boost::chrono::time_point<boost::chrono::steady_clock> _start;
 
                 friend class System;
             };
@@ -139,7 +139,7 @@
 
                 static std::shared_ptr<System> create(const std::shared_ptr<Context>&);
 
-                void tick(const std::chrono::steady_clock::time_point&, const Time::Unit&);
+                void tick(const boost::chrono::steady_clock::time_point&, const Time::Unit&);
 
             private:
                 void _addAnimation(const std::weak_ptr<Animation> &);
--- lib/djvCore/ISystem.cpp.orig	2020-01-27 20:53:46.109937571 +0000
+++ lib/djvCore/ISystem.cpp	2020-01-27 20:54:18.389634586 +0000
@@ -66,7 +66,7 @@
             _dependencies.push_back(value);
         }
         
-        void ISystemBase::tick(const std::chrono::steady_clock::time_point&, const Time::Unit&)
+        void ISystemBase::tick(const boost::chrono::steady_clock::time_point&, const Time::Unit&)
         {
             // Default implementation does nothing.
         }
--- lib/djvCore/IEventSystem.h.orig	2020-01-27 20:59:45.174496242 +0000
+++ lib/djvCore/IEventSystem.h	2020-01-27 21:00:22.862127872 +0000
@@ -66,7 +66,7 @@
                 virtual void setClipboard(const std::string&);
                 virtual std::string getClipboard() const;
 
-                void tick(const std::chrono::steady_clock::time_point&, const Time::Unit&) override;
+                void tick(const boost::chrono::steady_clock::time_point&, const Time::Unit&) override;
 
                 //! \todo How can we make this function protected?
                 void _objectCreated(const std::shared_ptr<IObject> &);
--- lib/djvCore/IEventSystem.cpp.orig	2020-01-27 21:05:25.167141984 +0000
+++ lib/djvCore/IEventSystem.cpp	2020-01-27 21:06:17.350622227 +0000
@@ -73,7 +73,7 @@
                 std::vector<std::shared_ptr<IObject> > objectsCreated;
                 std::shared_ptr<RootObject> rootObject;
                 std::weak_ptr<TextSystem> textSystem;
-                std::chrono::steady_clock::time_point t;
+                boost::chrono::steady_clock::time_point t;
                 PointerInfo pointerInfo;
                 std::shared_ptr<ValueSubject<PointerInfo> > pointerSubject;
                 std::shared_ptr<ValueSubject<std::shared_ptr<IObject> > > hover;
@@ -126,7 +126,7 @@
                 p.statsTimer->setRepeating(true);
                 p.statsTimer->start(
                     Time::getTime(Time::TimerValue::VerySlow),
-                    [weak](const std::chrono::steady_clock::time_point&, const Time::Unit&)
+                    [weak](const boost::chrono::steady_clock::time_point&, const Time::Unit&)
                 {
                     if (auto system = weak.lock())
                     {
@@ -203,7 +203,7 @@
                 return std::string();
             }
 
-            void IEventSystem::tick(const std::chrono::steady_clock::time_point&, const Time::Unit& dt)
+            void IEventSystem::tick(const boost::chrono::steady_clock::time_point&, const Time::Unit& dt)
             {
                 DJV_PRIVATE_PTR();
                 p.t += dt;
--- lib/djvCore/Timer.h.orig	2020-01-27 21:11:21.639574909 +0000
+++ lib/djvCore/Timer.h	2020-01-27 21:12:32.102866197 +0000
@@ -33,7 +33,7 @@
 #include <djvCore/ISystem.h>
 #include <djvCore/Time.h>
 
-#include <chrono>
+#include <boost/chrono.hpp>
 #include <functional>
 
 namespace djv
@@ -85,20 +85,20 @@
                 //! Start the timer.
                 void start(
                     const Unit&,
-                    const std::function<void(const std::chrono::steady_clock::time_point&, const Unit&)> &);
+                    const std::function<void(const boost::chrono::steady_clock::time_point&, const Unit&)> &);
 
                 //! Stop the timer.
                 void stop();
 
             private:
-                void _tick(const std::chrono::steady_clock::time_point&, const Unit&);
+                void _tick(const boost::chrono::steady_clock::time_point&, const Unit&);
 
                 bool _repeating = false;
                 bool _active = false;
                 Unit _timeout = Unit::zero();
-                std::function<void(const std::chrono::steady_clock::time_point&, const Unit&)> _callback;
-                std::chrono::time_point<std::chrono::steady_clock> _time;
-                std::chrono::time_point<std::chrono::steady_clock> _start;
+                std::function<void(const boost::chrono::steady_clock::time_point&, const Unit&)> _callback;
+                boost::chrono::time_point<boost::chrono::steady_clock> _time;
+                boost::chrono::time_point<boost::chrono::steady_clock> _start;
 
                 friend class TimerSystem;
             };
@@ -116,7 +116,7 @@
                 //! Create a new timer system.
                 static std::shared_ptr<TimerSystem> create(const std::shared_ptr<Context>&);
 
-                void tick(const std::chrono::steady_clock::time_point&, const Unit&);
+                void tick(const boost::chrono::steady_clock::time_point&, const Unit&);
 
             private:
                 void _addTimer(const std::weak_ptr<Timer> &);
--- lib/djvCore/DrivesModel.cpp.orig	2020-01-27 21:17:01.968144961 +0000
+++ lib/djvCore/DrivesModel.cpp	2020-01-27 21:17:40.003760729 +0000
@@ -89,7 +89,7 @@
                 p.timer->setRepeating(true);
                 p.timer->start(
                     timeout,
-                    [this](const std::chrono::steady_clock::time_point&, const Time::Unit&)
+                    [this](const boost::chrono::steady_clock::time_point&, const Time::Unit&)
                 {
                     DJV_PRIVATE_PTR();
                     std::vector<Path> drives;
--- lib/djvCore/DirectoryModel.cpp.orig	2020-01-27 21:21:54.229226153 +0000
+++ lib/djvCore/DirectoryModel.cpp	2020-01-27 21:22:24.312960103 +0000
@@ -388,7 +388,7 @@
 
                 p.futureTimer->start(
                     Time::getTime(Time::TimerValue::Medium),
-                    [this](const std::chrono::steady_clock::time_point&, const Time::Unit&)
+                    [this](const boost::chrono::steady_clock::time_point&, const Time::Unit&)
                 {
                     DJV_PRIVATE_PTR();
                     if (p.future.valid() &&
--- lib/djvCore/Context.cpp.orig	2020-01-27 21:26:28.618738970 +0000
+++ lib/djvCore/Context.cpp	2020-01-27 21:27:22.686235632 +0000
@@ -99,7 +99,7 @@
             auto weak = std::weak_ptr<Context>(shared_from_this());
             _fpsTimer->start(
                 Time::getTime(Time::TimerValue::VerySlow),
-                [weak](const std::chrono::steady_clock::time_point&, const Time::Unit&)
+                [weak](const boost::chrono::steady_clock::time_point&, const Time::Unit&)
             {
                 if (auto context = weak.lock())
                 {
@@ -136,9 +136,9 @@
             }
         }
         
-        void Context::tick(const std::chrono::steady_clock::time_point& t, const Time::Unit& dt)
+        void Context::tick(const boost::chrono::steady_clock::time_point& t, const Time::Unit& dt)
         {
-            std::chrono::duration<float> delta = t - _fpsTime;
+            boost::chrono::duration<float> delta = t - _fpsTime;
             _fpsTime = t;
             _fpsSamples.push_front(1.F / delta.count());
             while (_fpsSamples.size() > fpsSamplesCount)
@@ -187,8 +187,8 @@
             for (const auto & system : _systems)
             {
                 system->tick(t, dt);
-                auto end = std::chrono::steady_clock::now();
-                const auto diff = std::chrono::duration_cast<Time::Unit>(end - sytemTime);
+                auto end = boost::chrono::steady_clock::now();
+                const auto diff = boost::chrono::duration_cast<Time::Unit>(end - sytemTime);
                 sytemTime = end;
                 auto& tickTimes = _systemTickTimesTemp[i];
                 tickTimes.first = system->getSystemName();
--- lib/djvCore/Context.h.orig	2020-01-27 21:37:19.408517244 +0000
+++ lib/djvCore/Context.h	2020-01-27 21:38:11.008013833 +0000
@@ -32,7 +32,7 @@
 #include <djvCore/Path.h>
 #include <djvCore/Time.h>
 
-#include <chrono>
+#include <boost/chrono.hpp>
 #include <list>
 #include <memory>
 #include <string>
@@ -96,7 +96,7 @@
             void removeSystem(const std::shared_ptr<ISystemBase>&);
 
             //! This function is called by the application event loop.
-            virtual void tick(const std::chrono::steady_clock::time_point&, const Time::Unit&);
+            virtual void tick(const boost::chrono::steady_clock::time_point&, const Time::Unit&);
 
             //! Get the average tick FPS.
             float getFPSAverage() const;
@@ -117,7 +117,7 @@
             std::vector<std::shared_ptr<ISystemBase> > _systems;
             std::vector<std::pair<std::string, Time::Unit> > _systemTickTimes;
             std::vector<std::pair<std::string, Time::Unit> > _systemTickTimesTemp;
-            std::chrono::time_point<std::chrono::steady_clock> _fpsTime = std::chrono::steady_clock::now();
+            boost::chrono::time_point<boost::chrono::steady_clock> _fpsTime = boost::chrono::steady_clock::now();
             std::list<float> _fpsSamples;
             float _fpsAverage = 0.F;
             std::shared_ptr<Time::Timer> _fpsTimer;
--- lib/djvCore/EventInline.h.orig	2020-01-27 21:41:59.653773821 +0000
+++ lib/djvCore/EventInline.h	2020-01-27 21:42:31.973456190 +0000
@@ -104,13 +104,13 @@
                 Event(Type::Init)
             {}
 
-            inline Update::Update(const std::chrono::steady_clock::time_point& t, const Time::Unit& dt) :
+            inline Update::Update(const boost::chrono::steady_clock::time_point& t, const Time::Unit& dt) :
                 Event(Type::Update),
                 _t(t),
                 _dt(dt)
             {}
 
-            inline const std::chrono::steady_clock::time_point& Update::getTime() const
+            inline const boost::chrono::steady_clock::time_point& Update::getTime() const
             {
                 return _t;
             }
--- lib/djvCore/Event.h.orig	2020-01-28 14:14:47.681899115 +0000
+++ lib/djvCore/Event.h	2020-01-28 14:15:41.825265111 +0000
@@ -36,7 +36,7 @@
 #include <glm/vec2.hpp>
 #include <glm/vec3.hpp>
 
-#include <chrono>
+#include <boost/chrono.hpp>
 #include <map>
 #include <memory>
 
@@ -157,13 +157,13 @@
             class Update : public Event
             {
             public:
-                Update(const std::chrono::steady_clock::time_point&, const Time::Unit&);
+                Update(const boost::chrono::steady_clock::time_point&, const Time::Unit&);
 
-                const std::chrono::steady_clock::time_point& getTime() const;
+                const boost::chrono::steady_clock::time_point& getTime() const;
                 const Time::Unit& getDeltaTime() const;
 
             private:
-                std::chrono::steady_clock::time_point _t;
+                boost::chrono::steady_clock::time_point _t;
                 Time::Unit _dt;
             };
 
--- lib/djvCore/LogSystem.cpp.orig	2020-01-28 14:26:55.133910727 +0000
+++ lib/djvCore/LogSystem.cpp	2020-01-28 14:27:24.133646818 +0000
@@ -153,7 +153,7 @@
             auto weak = std::weak_ptr<LogSystem>(std::dynamic_pointer_cast<LogSystem>(shared_from_this()));
             p.warningsAndErrorsTimer->start(
                 Time::getTime(Time::TimerValue::Medium),
-                [weak](const std::chrono::steady_clock::time_point&, const Time::Unit&)
+                [weak](const boost::chrono::steady_clock::time_point&, const Time::Unit&)
                 {
                     if (auto system = weak.lock())
                     {
--- lib/djvCore/TextSystem.cpp.orig	2020-01-28 15:17:54.631012497 +0000
+++ lib/djvCore/TextSystem.cpp	2020-01-28 15:18:24.530704704 +0000
@@ -241,7 +241,7 @@
             auto weak = std::weak_ptr<TextSystem>(std::dynamic_pointer_cast<TextSystem>(shared_from_this()));
             p.timer->start(
                 Time::getTime(Time::TimerValue::Slow),
-                [weak](const std::chrono::steady_clock::time_point&, const Time::Unit&)
+                [weak](const boost::chrono::steady_clock::time_point&, const Time::Unit&)
                 {
                     if (auto system = weak.lock())
                     {
--- lib/djvCore/Timer.cpp.orig	2020-01-28 16:31:51.178112444 +0000
+++ lib/djvCore/Timer.cpp	2020-01-28 16:32:44.057568470 +0000
@@ -55,7 +55,7 @@
 
             Unit getTime(TimerValue value)
             {
-                return Unit(std::chrono::duration_cast<Unit>(std::chrono::milliseconds(getValue(value))));
+                return Unit(boost::chrono::duration_cast<Unit>(boost::chrono::milliseconds(getValue(value))));
             }
 
             void Timer::_init(const std::shared_ptr<Context>& context)
@@ -80,7 +80,7 @@
 
             void Timer::start(
                 const Unit& value,
-                const std::function<void(const std::chrono::steady_clock::time_point&, const Unit&)> & callback)
+                const std::function<void(const boost::chrono::steady_clock::time_point&, const Unit&)> & callback)
             {
                 _active   = true;
                 _timeout  = value;
@@ -93,7 +93,7 @@
                 _active = false;
             }
 
-            void Timer::_tick(const std::chrono::steady_clock::time_point& t, const Unit& dt)
+            void Timer::_tick(const boost::chrono::steady_clock::time_point& t, const Unit& dt)
             {
                 _time = t;
                 if (_active)
@@ -102,7 +102,7 @@
                     {
                         if (_callback)
                         {
-                            const auto v = std::chrono::duration_cast<Unit>(_time - _start);
+                            const auto v = boost::chrono::duration_cast<Unit>(_time - _start);
                             _callback(_time, v);
                         }
                         if (_repeating)
@@ -142,7 +142,7 @@
                 return out;
             }
 
-            void TimerSystem::tick(const std::chrono::steady_clock::time_point& t, const Unit& dt)
+            void TimerSystem::tick(const boost::chrono::steady_clock::time_point& t, const Unit& dt)
             {
                 DJV_PRIVATE_PTR();
                 p.timers.insert(p.timers.end(), p.newTimers.begin(), p.newTimers.end());
--- lib/djvCore/DirectoryWatcherWin32.cpp.orig	2020-01-28 17:30:34.515122991 +0000
+++ lib/djvCore/DirectoryWatcherWin32.cpp	2020-01-28 17:31:12.610734507 +0000
@@ -36,7 +36,7 @@
 
 #include <atomic>
 #include <codecvt>
-#include <condition_variable>
+/* #include <condition_variable>*/
 #include <locale>
 #include <boost/thread/mutex.hpp>
 #include <boost/thread.hpp>
@@ -158,7 +158,7 @@
                 p.timer->setRepeating(true);
                 p.timer->start(
                     timeout,
-                    [this](const std::chrono::steady_clock::time_point&, const Time::Unit&)
+                    [this](const boost::chrono::steady_clock::time_point&, const Time::Unit&)
                 {
                     DJV_PRIVATE_PTR();
                     bool changed = false;
--- lib/djvAV/FontSystem.h.orig	2020-01-28 17:36:34.415459886 +0000
+++ lib/djvAV/FontSystem.h	2020-01-28 17:37:54.406647377 +0000
@@ -35,8 +35,9 @@
 #include <djvCore/ISystem.h>
 #include <djvCore/MapObserver.h>
 #include <djvCore/Range.h>
-
-#include <future>
+#define BOOST_THREAD_PROVIDES_FUTURE
+#include <boost/thread.hpp>
+#include <boost/thread/future.hpp>
 
 namespace djv
 {
@@ -163,25 +164,25 @@
                 std::shared_ptr<Core::IMapSubject<FamilyID, std::string> > observeFontNames() const;
 
                 //! Get font metrics.
-                std::future<Metrics> getMetrics(const Info &);
+                boost::future<Metrics> getMetrics(const Info &);
 
                 //! Measure the size of text.
-                std::future<glm::vec2> measure(
+                boost::future<glm::vec2> measure(
                     const std::string& text,
                     const Info&        info);
 
                 //! Measure glyphs.
-                std::future<std::vector<Core::BBox2f> > measureGlyphs(
+                boost::future<std::vector<Core::BBox2f> > measureGlyphs(
                     const std::string& text,
                     const Info&        info);
 
                 //! Get font glyphs.
-                std::future<std::vector<std::shared_ptr<Glyph> > > getGlyphs(
+                boost::future<std::vector<std::shared_ptr<Glyph> > > getGlyphs(
                     const std::string& text,
                     const Info&        info);
 
                 //! Break text into lines for wrapping.
-                std::future<std::vector<TextLine> > textLines(
+                boost::future<std::vector<TextLine> > textLines(
                     const std::string& text,
                     uint16_t           maxLineWidth,
                     const Info&        info);
--- lib/djvAV/FFmpeg.h.orig	2020-01-28 18:00:32.365212577 +0000
+++ lib/djvAV/FFmpeg.h	2020-01-28 18:02:18.540169664 +0000
@@ -32,6 +32,9 @@
 #include <djvAV/IO.h>
 
 #include <djvCore/Frame.h>
+#define BOOST_THREAD_PROVIDES_FUTURE
+#include <boost/thread.hpp>
+#include <boost/thread/future.hpp>
 
 #if defined(DJV_PLATFORM_LINUX)
 #define __STDC_CONSTANT_MACROS
@@ -98,7 +101,7 @@
 
                     bool isRunning() const override;
 
-                    std::future<Info> getInfo() override;
+                    boost::future<Info> getInfo() override;
 
                     void seek(int64_t, Direction) override;
 
--- lib/djvAV/IO.cpp.orig	2020-01-28 18:07:00.481382427 +0000
+++ lib/djvAV/IO.cpp	2020-01-28 18:09:43.059766935 +0000
@@ -156,7 +156,7 @@
 
             void IIO::setThreadCount(size_t value)
             {
-                std::unique_lock<std::mutex> lock(_mutex);
+                boost::unique_lock<boost::mutex> lock(_mutex);
                 _threadCount = value;
             }
 
@@ -345,13 +345,13 @@
 
             void IRead::setPlayback(bool value)
             {
-                std::lock_guard<std::mutex> lock(_mutex);
+                boost::lock_guard<boost::mutex> lock(_mutex);
                 _playback = value;
             }
             
             void IRead::setInOutPoints(const InOutPoints& value)
             {
-                std::lock_guard<std::mutex> lock(_mutex);
+                boost::lock_guard<boost::mutex> lock(_mutex);
                 _inOutPoints = value;
             }
             
@@ -367,31 +367,31 @@
 
             size_t IRead::getCacheByteCount()
             {
-                std::lock_guard<std::mutex> lock(_mutex);
+                boost::lock_guard<boost::mutex> lock(_mutex);
                 return _cacheByteCount;
             }
 
             Frame::Sequence IRead::getCacheSequence()
             {
-                std::lock_guard<std::mutex> lock(_mutex);
+                boost::lock_guard<boost::mutex> lock(_mutex);
                 return _cacheSequence;
             }
 
             Frame::Sequence IRead::getCachedFrames()
             {
-                std::lock_guard<std::mutex> lock(_mutex);
+                boost::lock_guard<boost::mutex> lock(_mutex);
                 return _cachedFrames;
             }
 
             void IRead::setCacheEnabled(bool value)
             {
-                std::lock_guard<std::mutex> lock(_mutex);
+                boost::lock_guard<boost::mutex> lock(_mutex);
                 _cacheEnabled = value;
             }
 
             void IRead::setCacheMaxByteCount(size_t value)
             {
-                std::lock_guard<std::mutex> lock(_mutex);
+                boost::lock_guard<boost::mutex> lock(_mutex);
                 _cacheMaxByteCount = value;
             }
 
--- lib/djvAV/Render2D.cpp.orig	2020-01-28 18:15:59.120016474 +0000
+++ lib/djvAV/Render2D.cpp	2020-01-28 18:16:49.831509739 +0000
@@ -569,7 +569,7 @@
                 p.statsTimer->setRepeating(true);
                 p.statsTimer->start(
                     Time::getTime(Time::TimerValue::VerySlow),
-                    [this](const std::chrono::steady_clock::time_point&, const Time::Unit&)
+                    [this](const boost::chrono::steady_clock::time_point&, const Time::Unit&)
                     {
                         DJV_PRIVATE_PTR();
                         std::stringstream ss;
--- lib/djvAV/SequenceIO.cpp.orig	2020-01-28 18:17:28.723120998 +0000
+++ lib/djvAV/SequenceIO.cpp	2020-01-28 18:30:45.902926526 +0000
@@ -42,8 +42,9 @@
 
 #define GLFW_INCLUDE_NONE
 #include <GLFW/glfw3.h>
-
-#include <future>
+#define BOOST_THREAD_PROVIDES_FUTURE
+#include <boost/thread.hpp>
+#include <boost/thread/future.hpp>
 
 using namespace djv::Core;
 
@@ -69,14 +70,14 @@
             struct ISequenceRead::Private
             {
                 Frame::Number frame = Frame::invalid;
-                std::promise<Info> infoPromise;
-                std::vector<std::future<Future> > cacheFutures;
+                boost::promise<Info> infoPromise;
+                std::vector<boost::future<Future> > cacheFutures;
                 std::condition_variable queueCV;
                 Direction direction = Direction::Forward;
                 Frame::Number seek = Frame::invalid;
-                std::thread thread;
+                boost::thread thread;
                 std::atomic<bool> running;
-                std::chrono::system_clock::time_point infoTimer;
+                boost::chrono::system_clock::time_point infoTimer;
             };
 
             void ISequenceRead::_init(
@@ -88,7 +89,7 @@
                 IRead::_init(fileInfo, options, resourceSystem, logSystem);
                 _speed = Time::Speed();
                 _p->running = true;
-                _p->thread = std::thread(
+                _p->thread = boost::thread(
                     [this]
                 {
                     DJV_PRIVATE_PTR();
@@ -139,7 +140,7 @@
                     }
 
                     // Start looping...
-                    p.infoTimer = std::chrono::system_clock::now();
+                    p.infoTimer = boost::chrono::system_clock::now();
                     const auto timeout = Time::getValue(Time::TimerValue::VeryFast);
                     while (p.running)
                     {
@@ -150,7 +151,7 @@
                         bool cacheEnabled = false;
                         size_t cacheMaxByteCount = 0;
                         {
-                            std::lock_guard<std::mutex> lock(_mutex);
+                            boost::lock_guard<boost::mutex> lock(_mutex);
                             threadCount = _threadCount;
                             playback = _playback;
                             inOutPoints = _inOutPoints;
@@ -177,10 +178,10 @@
                         size_t queueCount = 0;
                         Frame::Number seek = Frame::invalid;
                         {
-                            std::unique_lock<std::mutex> lock(_mutex);
+                            boost::unique_lock<boost::mutex> lock(_mutex);
                             if (p.queueCV.wait_for(
                                 lock,
-                                std::chrono::milliseconds(timeout),
+                                boost::chrono::milliseconds(timeout),
                                 [this]
                                 {
                                     return _hasWork();
@@ -226,8 +227,8 @@
                         }
 
                         // Update information.
-                        const auto now = std::chrono::system_clock::now();
-                        std::chrono::duration<double> delta = now - p.infoTimer;
+                        const auto now = boost::chrono::system_clock::now();
+                        boost::chrono::duration<double> delta = now - p.infoTimer;
                         if (delta.count() > infoTimeout)
                         {
                             p.infoTimer = now;
@@ -259,7 +260,7 @@
                 return _p->running;
             }
 
-            std::future<Info> ISequenceRead::getInfo()
+            boost::future<Info> ISequenceRead::getInfo()
             {
                 return _p->infoPromise.get_future();
             }
@@ -268,7 +269,7 @@
             {
                 DJV_PRIVATE_PTR();
                 {
-                    std::lock_guard<std::mutex> lock(_mutex);
+                    boost::lock_guard<boost::mutex> lock(_mutex);
                     p.seek = value;
                     _direction = direction;
                 }
@@ -300,10 +301,10 @@
                 return std::min(queueMax, threadCount);
             }
 
-            std::future<ISequenceRead::Future> ISequenceRead::_getFuture(Frame::Number i, std::string fileName)
+            boost::future<ISequenceRead::Future> ISequenceRead::_getFuture(Frame::Number i, std::string fileName)
             {
-                return std::async(
-                    std::launch::async,
+                return boost::async(
+                    boost::launch::async,
                     [this, i, fileName]
                     {
                         Future out;
@@ -329,7 +330,7 @@
                 // Get frames to be added to the queue.
                 const size_t sequenceSize = _sequence.getSize();
                 std::vector<std::pair<Frame::Number, std::shared_ptr<Image::Image> > > images;
-                std::vector<std::future<Future> > futures;
+                std::vector<boost::future<Future> > futures;
                 for (size_t i = 0; i < count; ++i)
                 {
                     std::shared_ptr<Image::Image> cachedImage;
@@ -397,7 +398,7 @@
 
                 // Add the frames to the queue.
                 {
-                    std::lock_guard<std::mutex> lock(_mutex);
+                    boost::lock_guard<boost::mutex> lock(_mutex);
                     for (const auto& i : images)
                     {
                         if (_videoQueue.getCount() >= _videoQueue.getMax())
@@ -410,7 +411,7 @@
 
                 if (Frame::invalid == p.frame || p.frame < 0 || p.frame >= static_cast<Frame::Number>(sequenceSize))
                 {
-                    std::lock_guard<std::mutex> lock(_mutex);
+                    boost::lock_guard<boost::mutex> lock(_mutex);
                     _videoQueue.setFinished(true);
                 }
 
@@ -424,7 +425,7 @@
                 // Get frames to be added to the cache.
                 Frame::Number frame = Frame::invalid;
                 {
-                    std::lock_guard<std::mutex> lock(_mutex);
+                    boost::lock_guard<boost::mutex> lock(_mutex);
                     if (_videoQueue.getCount())
                     {
                         frame = _videoQueue.getFrame().frame;
@@ -525,7 +526,7 @@
                 Frame::Number frameNumber = Frame::invalid;
                 GLFWwindow * glfwWindow = nullptr;
                 std::shared_ptr<Image::Convert> convert;
-                std::thread thread;
+                boost::thread thread;
                 std::atomic<bool> running;
             };
 
@@ -581,7 +582,7 @@
                 }
 
                 p.running = true;
-                p.thread = std::thread(
+                p.thread = boost::thread(
                     [this]
                 {
                     DJV_PRIVATE_PTR();
@@ -606,7 +607,7 @@
                         {
                             std::vector<std::shared_ptr<Image::Image> > images;
                             {
-                                std::unique_lock<std::mutex> lock(_mutex, std::try_to_lock);
+                                boost::unique_lock<boost::mutex> lock(_mutex, boost::try_to_lock);
                                 if (lock.owns_lock())
                                 {
                                     while (!_videoQueue.isEmpty() && images.size() < _threadCount)
@@ -628,7 +629,7 @@
                                     bool error = false;
                                     std::string errorString;
                                 };
-                                std::vector<std::future<Future> > futures;
+                                std::vector<boost::future<Future> > futures;
                                 for (size_t i = 0; i < images.size(); ++i)
                                 {
                                     const auto fileName = p.fileInfo.getFileName(p.frameNumber);
@@ -658,8 +659,8 @@
                                         p.convert->process(*image, info, *tmp);
                                         image = tmp;
                                     }
-                                    futures.push_back(std::async(
-                                        std::launch::async,
+                                    futures.push_back(boost::async(
+                                        boost::launch::async,
                                         [this, fileName, image]
                                         {
                                             Future out;
@@ -691,7 +692,7 @@
                             }
                             else
                             {
-                                std::this_thread::sleep_for(std::chrono::milliseconds(timeout));
+                                boost::this_thread::sleep_for(boost::chrono::milliseconds(timeout));
                             }
                         }
 
--- lib/djvAV/SequenceIO.cpp.orig	2020-01-28 20:59:39.958828733 +0000
+++ lib/djvAV/SequenceIO.cpp	2020-01-28 21:00:47.674183436 +0000
@@ -126,7 +126,7 @@
                         try
                         {
                             {
-                                std::lock_guard<std::mutex> lock(_mutex);
+                                boost::lock_guard<boost::mutex> lock(_mutex);
                                 _videoQueue.setFinished(true);
                                 _audioQueue.setFinished(true);
                             }
@@ -236,7 +236,7 @@
                             auto cacheSequence = _cache.getSequence();
                             auto cachedFrames = _cache.getFrames();
                             {
-                                std::lock_guard<std::mutex> lock(_mutex);
+                                boost::lock_guard<boost::mutex> lock(_mutex);
                                 _cacheByteCount = cacheByteCount;
                                 _cacheSequence = cacheSequence;
                                 _cachedFrames = std::move(cachedFrames);
--- lib/djvAV/SequenceIO.cpp.orig	2020-01-28 21:05:47.867287886 +0000
+++ lib/djvAV/SequenceIO.cpp	2020-01-28 21:07:13.010458913 +0000
@@ -72,7 +72,7 @@
                 Frame::Number frame = Frame::invalid;
                 boost::promise<Info> infoPromise;
                 std::vector<boost::future<Future> > cacheFutures;
-                std::condition_variable queueCV;
+                boost::condition_variable queueCV;
                 Direction direction = Direction::Forward;
                 Frame::Number seek = Frame::invalid;
                 boost::thread thread;
@@ -501,7 +501,7 @@
                 while (i != p.cacheFutures.end())
                 {
                     if (i->valid() &&
-                        i->wait_for(std::chrono::seconds(0)) == std::future_status::ready)
+                        i->wait_for(boost::chrono::seconds(0)) == boost::future_status::ready)
                     {
                         const auto result = i->get();
                         if (result.image)
--- lib/djvAV/FFmpegRead.cpp.orig	2020-01-28 21:12:01.643632388 +0000
+++ lib/djvAV/FFmpegRead.cpp	2020-01-28 21:16:58.700757747 +0000
@@ -59,11 +59,11 @@
                     VideoInfo videoInfo;
                     AudioInfo audioInfo;
                     Time::Speed speed;
-                    std::promise<Info> infoPromise;
-                    std::condition_variable queueCV;
+                    boost::promise<Info> infoPromise;
+                    boost::condition_variable queueCV;
                     int64_t seek = Frame::invalid;
                     Direction direction = Direction::Forward;
-                    std::thread thread;
+                    boost::thread thread;
                     std::atomic<bool> running;
 
                     AVFormatContext * avFormatContext = nullptr;
@@ -87,7 +87,7 @@
                     DJV_PRIVATE_PTR();
                     p.options = options;
                     p.running = true;
-                    p.thread = std::thread(
+                    p.thread = boost::thread(
                         [this]
                     {
                         DJV_PRIVATE_PTR();
@@ -367,7 +367,7 @@
                                 int64_t seek = Frame::invalid;
                                 {
                                     //const std::vector<Frame::Number> cachedFrames = _cache.getKeys();
-                                    std::unique_lock<std::mutex> lock(_mutex);
+                                    boost::unique_lock<boost::mutex> lock(_mutex);
                                     if (p.queueCV.wait_for(
                                         lock,
                                         Time::getTime(Time::TimerValue::Fast),
@@ -562,7 +562,7 @@
                                     }*/
                                     av_packet_unref(&packet);
                                     {
-                                        std::lock_guard<std::mutex> lock(_mutex);
+                                        boost::lock_guard<boost::mutex> lock(_mutex);
                                         _videoQueue.setFinished(true);
                                         _audioQueue.setFinished(true);
                                     }
@@ -643,7 +643,7 @@
                 {
                     DJV_PRIVATE_PTR();
                     {
-                        std::lock_guard<std::mutex> lock(_mutex);
+                        boost::lock_guard<boost::mutex> lock(_mutex);
                         _videoQueue.clearFrames();
                         _audioQueue.clearFrames();
                         p.seek = value;
@@ -713,7 +713,7 @@
                                 }
                             }
                             {
-                                std::lock_guard<std::mutex> lock(_mutex);
+                                boost::lock_guard<boost::mutex> lock(_mutex);
                                 if (Frame::invalid == p.seek)
                                 {
                                     _videoQueue.addFrame(VideoFrame(frame, image));
@@ -892,7 +892,7 @@
                             default: break;
                             }
                             {
-                                std::lock_guard<std::mutex> lock(_mutex);
+                                boost::lock_guard<boost::mutex> lock(_mutex);
                                 if (Frame::invalid == p.seek)
                                 {
                                     _audioQueue.addFrame(AudioFrame(audioData));
--- lib/djvAV/ThumbnailSystem.cpp.orig	2020-01-28 21:22:21.921675245 +0000
+++ lib/djvAV/ThumbnailSystem.cpp	2020-01-28 21:28:08.234319004 +0000
@@ -44,8 +44,9 @@
 #include <GLFW/glfw3.h>
 
 #include <atomic>
-#include <mutex>
-#include <thread>
+#define BOOST_THREAD_PROVIDES_FUTURE
+#include <boost/thread.hpp>
+#include <boost/thread/future.hpp>
 
 using namespace djv::Core;
 
@@ -94,8 +95,8 @@
                 UID uid = 0;
                 FileSystem::FileInfo fileInfo;
                 std::shared_ptr<IO::IRead> read;
-                std::future<IO::Info> infoFuture;
-                std::promise<IO::Info> promise;
+                boost::future<IO::Info> infoFuture;
+                boost::promise<IO::Info> promise;
             };
 
             struct ImageRequest
@@ -135,7 +136,7 @@
                 Image::Size size;
                 Image::Type type = Image::Type::None;
                 std::shared_ptr<IO::IRead> read;
-                std::promise<std::shared_ptr<Image::Image> > promise;
+                boost::promise<std::shared_ptr<Image::Image> > promise;
             };
 
             size_t getInfoCacheKey(const FileSystem::FileInfo & fileInfo)
@@ -160,7 +161,7 @@
         ThumbnailSystem::InfoFuture::InfoFuture()
         {}
         
-        ThumbnailSystem::InfoFuture::InfoFuture(std::future<IO::Info> & future, UID uid) :
+        ThumbnailSystem::InfoFuture::InfoFuture(boost::future<IO::Info> & future, UID uid) :
             future(std::move(future)),
             uid(uid)
         {}
@@ -168,7 +169,7 @@
         ThumbnailSystem::ImageFuture::ImageFuture()
         {}
         
-        ThumbnailSystem::ImageFuture::ImageFuture(std::future<std::shared_ptr<Image::Image> > & future, UID uid) :
+        ThumbnailSystem::ImageFuture::ImageFuture(boost::future<std::shared_ptr<Image::Image> > & future, UID uid) :
             future(std::move(future)),
             uid(uid)
         {}
@@ -183,8 +184,8 @@
 
             std::list<InfoRequest> infoRequests;
             std::list<ImageRequest> imageRequests;
-            std::condition_variable requestCV;
-            std::mutex requestMutex;
+            boost::condition_variable requestCV;
+            boost::mutex requestMutex;
             std::list<InfoRequest> pendingInfoRequests;
             std::list<ImageRequest> pendingImageRequests;
 
@@ -197,7 +198,7 @@
 
             GLFWwindow * glfwWindow = nullptr;
             std::shared_ptr<Time::Timer> statsTimer;
-            std::thread thread;
+            boost::thread thread;
             std::atomic<bool> running;
         };
 
@@ -258,7 +259,7 @@
             auto logSystem = context->getSystemT<LogSystem>();
             auto resourceSystem = context->getSystemT<ResourceSystem>();
             p.running = true;
-            p.thread = std::thread(
+            p.thread = boost::thread(
                 [this, resourceSystem, logSystem]
             {
                 DJV_PRIVATE_PTR();
@@ -293,7 +294,7 @@
                         bool infoRequests  = p.pendingInfoRequests.size();
                         bool imageRequests = p.pendingImageRequests.size();
                         {
-                            std::unique_lock<std::mutex> lock(p.requestMutex);
+                            boost::unique_lock<boost::mutex> lock(p.requestMutex);
                             if (p.requestCV.wait_for(
                                 lock,
                                 std::chrono::milliseconds(timeout),
@@ -367,7 +368,7 @@
             request.fileInfo = fileInfo;
             auto future = request.promise.get_future();
             {
-                std::unique_lock<std::mutex> lock(p.requestMutex);
+                boost::unique_lock<boost::mutex> lock(p.requestMutex);
                 p.infoRequests.push_back(std::move(request));
             }
             p.requestCV.notify_one();
@@ -378,7 +379,7 @@
         {
             DJV_PRIVATE_PTR();
             {
-                std::unique_lock<std::mutex> lock(p.requestMutex);
+                boost::unique_lock<boost::mutex> lock(p.requestMutex);
                 const auto i = std::find_if(
                     p.infoRequests.rbegin(),
                     p.infoRequests.rend(),
@@ -405,7 +406,7 @@
             request.type = type;
             auto future = request.promise.get_future();
             {
-                std::unique_lock<std::mutex> lock(p.requestMutex);
+                boost::unique_lock<boost::mutex> lock(p.requestMutex);
                 p.imageRequests.push_back(std::move(request));
             }
             p.requestCV.notify_one();
@@ -416,7 +417,7 @@
         {
             DJV_PRIVATE_PTR();
             {
-                std::unique_lock<std::mutex> lock(p.requestMutex);
+                boost::unique_lock<boost::mutex> lock(p.requestMutex);
                 const auto i = std::find_if(
                     p.imageRequests.rbegin(),
                     p.imageRequests.rend(),
@@ -455,7 +456,7 @@
             {
                 InfoRequest i;
                 {
-                    std::unique_lock<std::mutex> lock(p.requestMutex);
+                    boost::unique_lock<boost::mutex> lock(p.requestMutex);
                     if (p.infoRequests.size())
                     {
                         i = std::move(p.infoRequests.front());
@@ -500,7 +501,7 @@
             while (i != p.pendingInfoRequests.end())
             {
                 if (i->infoFuture.valid() &&
-                    i->infoFuture.wait_for(std::chrono::seconds(0)) == std::future_status::ready)
+                    i->infoFuture.wait_for(std::chrono::seconds(0)) == boost::future_status::ready)
                 {
                     try
                     {
@@ -538,7 +539,7 @@
             {
                 ImageRequest i;
                 {
-                    std::unique_lock<std::mutex> lock(p.requestMutex);
+                    boost::unique_lock<boost::mutex> lock(p.requestMutex);
                     if (p.imageRequests.size())
                     {
                         i = std::move(p.imageRequests.front());
@@ -592,7 +593,7 @@
                 std::shared_ptr<Image::Image> image;
                 bool finished = false;
                 {
-                    std::lock_guard<std::mutex> lock(i->read->getMutex());
+                    boost::lock_guard<boost::mutex> lock(i->read->getMutex());
                     auto& queue = i->read->getVideoQueue();
                     if (!queue.isEmpty())
                     {
--- lib/djvAV/ThumbnailSystem.cpp.orig	2020-01-28 21:33:08.179388387 +0000
+++ lib/djvAV/ThumbnailSystem.cpp	2020-01-28 21:33:36.199113911 +0000
@@ -245,7 +245,7 @@
             p.statsTimer->setRepeating(true);
             p.statsTimer->start(
                 Time::getTime(Time::TimerValue::VerySlow),
-                [this](const std::chrono::steady_clock::time_point&, const Time::Unit&)
+                [this](const boost::chrono::steady_clock::time_point&, const Time::Unit&)
             {
                 DJV_PRIVATE_PTR();
                 std::stringstream ss;
@@ -297,7 +297,7 @@
                             boost::unique_lock<boost::mutex> lock(p.requestMutex);
                             if (p.requestCV.wait_for(
                                 lock,
-                                std::chrono::milliseconds(timeout),
+                                boost::chrono::milliseconds(timeout),
                                 [this]
                             {
                                 DJV_PRIVATE_PTR();
@@ -501,7 +501,7 @@
             while (i != p.pendingInfoRequests.end())
             {
                 if (i->infoFuture.valid() &&
-                    i->infoFuture.wait_for(std::chrono::seconds(0)) == boost::future_status::ready)
+                    i->infoFuture.wait_for(boost::chrono::seconds(0)) == boost::future_status::ready)
                 {
                     try
                     {
--- lib/djvAV/FFmpegRead.cpp.orig	2020-01-28 21:33:48.222996098 +0000
+++ lib/djvAV/FFmpegRead.cpp	2020-01-28 21:34:13.094752344 +0000
@@ -634,7 +634,7 @@
                     return _p->running;
                 }
 
-                std::future<Info> Read::getInfo()
+                boost::future<Info> Read::getInfo()
                 {
                     return _p->infoPromise.get_future();
                 }
