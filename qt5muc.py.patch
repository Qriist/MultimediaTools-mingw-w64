--- admin/qt5muc.py	(original)
+++ admin/qt5muc.py	(refactored)
@@ -69,7 +69,7 @@
 
 		return ret
 
-	print("\nWarning! was called with an unhandled suffix: [{}]\\n".format(node_extn))
+	print(("\nWarning! was called with an unhandled suffix: [{}]\\n".format(node_extn)))
 	return []
 
 def GetAppVersion( context, app, version ):
@@ -90,7 +90,7 @@
 	return ret
 
 def generate( env ):
-	print "Configuring qt5muc..."
+	print("Configuring qt5muc...")
 
 	conf = env.Configure( custom_tests = { 'GetAppVersion' : GetAppVersion } )
 
@@ -115,7 +115,7 @@
 		env.Exit( 1 )
 
 	env = conf.Finish()
-	print "Done. Will define a more or less automatic environment to do all the qt-specific stuff."
+	print("Done. Will define a more or less automatic environment to do all the qt-specific stuff.")
 
 	moc = SCons.Builder.Builder( action="%s $SOURCES > $TARGET" % moc, suffix='.moc', src_suffix='.h'   )
 	uic = SCons.Builder.Builder( action="%s $SOURCES > $TARGET" % uic, suffix='.h',   src_suffix='.ui'  )
--- admin/qt5muc.py.orig	2020-03-14 18:16:57.934369233 +0000
+++ admin/qt5muc.py	2020-03-14 18:19:48.404718963 +0000
@@ -2,6 +2,7 @@
 
 import re
 import os.path
+import subprocess
 
 include_re = re.compile(r'\n\#include \"([a-zA-Z0-9._]*)\"', re.M)
 
@@ -77,7 +78,9 @@
 
 	context.Message( "Checking if the output of '%s' contains '%s' " % (app,version) )
 
-	out = os.popen3( app )
+	#out = os.popen3( app )
+        out = subprocess.Popen (app, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
+        
 	#print out[1] + out[2]
 	str = out[1].read() + out[2].read()
 
--- admin/qt5muc.py.orig	2020-03-14 18:24:01.194251263 +0000
+++ admin/qt5muc.py	2020-03-14 19:16:50.217039627 +0000
@@ -10,126 +10,126 @@
 import SCons.Tool
 
 def exists( env ):
-	return True
+    return True
 
 def moc_emitter( target, source, env ):
-	base = str(source[0]).split(".")[0:-1][0]
-	contents = source[0].get_contents();
-	if contents.count( "\n#include \""+base+".moc\"" ):
-		#print "moc_emitter on " + str(source[0])
-		header = base+".h"
-		moc = base+".moc"
-		env.MOCBuilder( source=header, target=moc )
-	return (target,source)
+    base = str(source[0]).split(".")[0:-1][0]
+        contents = source[0].get_contents();
+        if contents.count( "\n#include \""+base+".moc\"" ):
+            #print "moc_emitter on " + str(source[0])
+                header = base+".h"
+                moc = base+".moc"
+                env.MOCBuilder( source=header, target=moc )
+        return (target,source)
 
 def uic_scanner( node, env, path ):
-	#print "uic_scanner: " + str(node).split(".")[-1]
-	if str(node).split(".")[-1] == "moc":
-		#print "mocbuilder"
-		header = str(node).split(".")[0:-1][0] + ".h"
-		env.MOCBuilder( source=header, target=str(node) )
-		return [ str(node).split("/")[-1].split(".")[0:-1][0] + ".h" ]
-
-	contents = node.get_contents()
-	includes = include_re.findall(contents)
-	if str(node).split(".")[-1] == "cpp":
-		#print "uic_scanner processing a cpp-file " + str(node)
-		ret = []
-		for inc in includes:
-			#print "Testing " + inc
-			if os.path.exists( os.path.join( str(node.dir), inc ) ) and inc.endswith( ".h" ):
-				#print " Found a normal include: " + inc
-				ret.append( inc )
-			if inc.endswith( ".moc" ):
-				#print " Found a moc include: " + inc
-				ret.append( inc )
-		#print "uic_scanner returning" + str(ret)
-		return ret
-
-	node_parts = str(node).split(".")
-	node_extn = node_parts[-1] if len(node_parts) > 1 else ""
-
-	if node_extn in [ "h", "" ]:
-		#print "uic_scanner processing a h-file " + str(node)
-		ret = []
-		for inc in includes:
-			header_to_check = os.path.join(str(node.dir),inc)
-			#print "Header to check: " + header_to_check
-			ui_to_check = header_to_check.split(".")[0:-1][0] +".ui"
-			#print "Ui to check: " + ui_to_check
-
-			if inc.endswith( ".moc" ):
-				#print " Found a moc include: " + inc
-				ret.append( inc )
-
-			if os.path.exists( ui_to_check ):
-				#print "Header doesn't exist but .ui file does!"
-				env.UIBuilder( target = header_to_check, source = ui_to_check )
-				#print [ header_to_check.split("/")[-1] ]
-				ret.append( header_to_check.split("/")[-1] )
+    #print "uic_scanner: " + str(node).split(".")[-1]
+        if str(node).split(".")[-1] == "moc":
+            #print "mocbuilder"
+                header = str(node).split(".")[0:-1][0] + ".h"
+                env.MOCBuilder( source=header, target=str(node) )
+                return [ str(node).split("/")[-1].split(".")[0:-1][0] + ".h" ]
+
+        contents = node.get_contents()
+        includes = include_re.findall(contents)
+        if str(node).split(".")[-1] == "cpp":
+            #print "uic_scanner processing a cpp-file " + str(node)
+                ret = []
+                for inc in includes:
+                    #print "Testing " + inc
+                        if os.path.exists( os.path.join( str(node.dir), inc ) ) and inc.endswith( ".h" ):
+                            #print " Found a normal include: " + inc
+                                ret.append( inc )
+                        if inc.endswith( ".moc" ):
+                            #print " Found a moc include: " + inc
+                                ret.append( inc )
+                #print "uic_scanner returning" + str(ret)
+                return ret
+
+        node_parts = str(node).split(".")
+        node_extn = node_parts[-1] if len(node_parts) > 1 else ""
+
+        if node_extn in [ "h", "" ]:
+            #print "uic_scanner processing a h-file " + str(node)
+                ret = []
+                for inc in includes:
+                    header_to_check = os.path.join(str(node.dir),inc)
+                        #print "Header to check: " + header_to_check
+                        ui_to_check = header_to_check.split(".")[0:-1][0] +".ui"
+                        #print "Ui to check: " + ui_to_check
+
+                        if inc.endswith( ".moc" ):
+                            #print " Found a moc include: " + inc
+                                ret.append( inc )
+
+                        if os.path.exists( ui_to_check ):
+                            #print "Header doesn't exist but .ui file does!"
+                                env.UIBuilder( target = header_to_check, source = ui_to_check )
+                                #print [ header_to_check.split("/")[-1] ]
+                                ret.append( header_to_check.split("/")[-1] )
 
-		return ret
+                return ret
 
-	print(("\nWarning! was called with an unhandled suffix: [{}]\\n".format(node_extn)))
-	return []
+        print(("\nWarning! was called with an unhandled suffix: [{}]\\n".format(node_extn)))
+        return []
 
 def GetAppVersion( context, app, version ):
-	import os
+    import os
 
-	context.Message( "Checking if the output of '%s' contains '%s' " % (app,version) )
+        context.Message( "Checking if the output of '%s' contains '%s' " % (app,version) )
 
-	#out = os.popen3( app )
+        #out = os.popen3( app )
         out = subprocess.Popen (app, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
-        
-	#print out[1] + out[2]
-	str = out[1].read() + out[2].read()
 
-	ret = False
+        #print out[1] + out[2]
+        str = out[1].read() + out[2].read()
 
-	if str.count( version ) > 0:
-		ret = True
+        ret = False
 
-	context.Result( ret )
-	return ret
+        if str.count( version ) > 0:
+            ret = True
+
+        context.Result( ret )
+        return ret
 
 def generate( env ):
-	print("Configuring qt5muc...")
+    print("Configuring qt5muc...")
 
-	conf = env.Configure( custom_tests = { 'GetAppVersion' : GetAppVersion } )
+        conf = env.Configure( custom_tests = { 'GetAppVersion' : GetAppVersion } )
 
-	def CommandFromList( commandlist, version ):
-		ret = ""
-		for command in commandlist:
-			if len( ret ) == 0:
-				if conf.GetAppVersion( "%s -v" % command, version ):
-					ret = command
-		return ret
+        def CommandFromList( commandlist, version ):
+            ret = ""
+                for command in commandlist:
+                    if len( ret ) == 0:
+                        if conf.GetAppVersion( "%s -v" % command, version ):
+                            ret = command
+                return ret
 
-	moc = CommandFromList( ( "moc", "moc5", "moc-qt5" ), "moc 5." )
-	if len( moc ) < 3:
-		env.Exit( 1 )
+        moc = CommandFromList( ( "moc", "moc5", "moc-qt5" ), "moc 5." )
+        if len( moc ) < 3:
+            env.Exit( 1 )
 
-	uic = CommandFromList( ( "uic", "uic5", "uic-qt5" ), "5." )
-	if len( uic ) < 3:
-		env.Exit( 1 )
+        uic = CommandFromList( ( "uic", "uic5", "uic-qt5" ), "5." )
+        if len( uic ) < 3:
+            env.Exit( 1 )
 
-	rcc = CommandFromList( ( "rcc", "rcc5", "rcc-qt5" ), "5." )
-	if len( rcc ) < 3:
-		env.Exit( 1 )
+        rcc = CommandFromList( ( "rcc", "rcc5", "rcc-qt5" ), "5." )
+        if len( rcc ) < 3:
+            env.Exit( 1 )
 
-	env = conf.Finish()
-	print("Done. Will define a more or less automatic environment to do all the qt-specific stuff.")
+        env = conf.Finish()
+        print("Done. Will define a more or less automatic environment to do all the qt-specific stuff.")
 
-	moc = SCons.Builder.Builder( action="%s $SOURCES > $TARGET" % moc, suffix='.moc', src_suffix='.h'   )
-	uic = SCons.Builder.Builder( action="%s $SOURCES > $TARGET" % uic, suffix='.h',   src_suffix='.ui'  )
-	rcc = SCons.Builder.Builder( action="%s $SOURCES > $TARGET" % rcc, suffix='.cpp', src_suffix=".qrc" )
+        moc = SCons.Builder.Builder( action="%s $SOURCES > $TARGET" % moc, suffix='.moc', src_suffix='.h'   )
+        uic = SCons.Builder.Builder( action="%s $SOURCES > $TARGET" % uic, suffix='.h',   src_suffix='.ui'  )
+        rcc = SCons.Builder.Builder( action="%s $SOURCES > $TARGET" % rcc, suffix='.cpp', src_suffix=".qrc" )
 
-	env['BUILDERS']['UIBuilder'] = uic
-	env['BUILDERS']['MOCBuilder'] = moc
-	env['BUILDERS']['RCCBUILDER'] = rcc
+        env['BUILDERS']['UIBuilder'] = uic
+        env['BUILDERS']['MOCBuilder'] = moc
+        env['BUILDERS']['RCCBUILDER'] = rcc
 
-	env['BUILDERS']['StaticObject'].add_emitter( ".cpp", moc_emitter )
-	env['BUILDERS']['SharedObject'].add_emitter( ".cpp", moc_emitter )
+        env['BUILDERS']['StaticObject'].add_emitter( ".cpp", moc_emitter )
+        env['BUILDERS']['SharedObject'].add_emitter( ".cpp", moc_emitter )
 
-	SCons.Tool.SourceFileScanner.add_scanner( '.cpp', SCons.Scanner.Scanner( uic_scanner, skeys=[".h"], recursive=1 ) )
+        SCons.Tool.SourceFileScanner.add_scanner( '.cpp', SCons.Scanner.Scanner( uic_scanner, skeys=[".h"], recursive=1 ) )
 
--- admin/qt5muc.py.orig	2020-03-14 19:19:53.605652028 +0000
+++ admin/qt5muc.py	2020-03-14 19:26:28.871415558 +0000
@@ -14,122 +14,122 @@
 
 def moc_emitter( target, source, env ):
     base = str(source[0]).split(".")[0:-1][0]
-        contents = source[0].get_contents();
-        if contents.count( "\n#include \""+base+".moc\"" ):
-            #print "moc_emitter on " + str(source[0])
-                header = base+".h"
-                moc = base+".moc"
-                env.MOCBuilder( source=header, target=moc )
-        return (target,source)
+    contents = source[0].get_contents();
+    if contents.count( "\n#include \""+base+".moc\"" ):
+        #print "moc_emitter on " + str(source[0])
+            header = base+".h"
+            moc = base+".moc"
+            env.MOCBuilder( source=header, target=moc )
+    return (target,source)
 
 def uic_scanner( node, env, path ):
     #print "uic_scanner: " + str(node).split(".")[-1]
-        if str(node).split(".")[-1] == "moc":
-            #print "mocbuilder"
-                header = str(node).split(".")[0:-1][0] + ".h"
-                env.MOCBuilder( source=header, target=str(node) )
-                return [ str(node).split("/")[-1].split(".")[0:-1][0] + ".h" ]
-
-        contents = node.get_contents()
-        includes = include_re.findall(contents)
-        if str(node).split(".")[-1] == "cpp":
-            #print "uic_scanner processing a cpp-file " + str(node)
-                ret = []
-                for inc in includes:
-                    #print "Testing " + inc
-                        if os.path.exists( os.path.join( str(node.dir), inc ) ) and inc.endswith( ".h" ):
-                            #print " Found a normal include: " + inc
-                                ret.append( inc )
-                        if inc.endswith( ".moc" ):
-                            #print " Found a moc include: " + inc
-                                ret.append( inc )
-                #print "uic_scanner returning" + str(ret)
-                return ret
+    if str(node).split(".")[-1] == "moc":
+    #print "mocbuilder"
+        header = str(node).split(".")[0:-1][0] + ".h"
+        env.MOCBuilder( source=header, target=str(node) )
+        return [ str(node).split("/")[-1].split(".")[0:-1][0] + ".h" ]
+
+    contents = node.get_contents()
+    includes = include_re.findall(contents)
+    if str(node).split(".")[-1] == "cpp":
+        #print "uic_scanner processing a cpp-file " + str(node)
+        ret = []
+        for inc in includes:
+        #print "Testing " + inc
+            if os.path.exists( os.path.join( str(node.dir), inc ) ) and inc.endswith( ".h" ):
+                           #print " Found a normal include: " + inc
+                ret.append( inc )
+            if inc.endswith( ".moc" ):
+             #print " Found a moc include: " + inc
+                ret.append( inc )
+               #print "uic_scanner returning" + str(ret)
+        return ret
 
-        node_parts = str(node).split(".")
-        node_extn = node_parts[-1] if len(node_parts) > 1 else ""
+    node_parts = str(node).split(".")
+    node_extn = node_parts[-1] if len(node_parts) > 1 else ""
 
-        if node_extn in [ "h", "" ]:
+    if node_extn in [ "h", "" ]:
             #print "uic_scanner processing a h-file " + str(node)
-                ret = []
-                for inc in includes:
-                    header_to_check = os.path.join(str(node.dir),inc)
+        ret = []
+        for inc in includes:
+            header_to_check = os.path.join(str(node.dir),inc)
                         #print "Header to check: " + header_to_check
-                        ui_to_check = header_to_check.split(".")[0:-1][0] +".ui"
+            ui_to_check = header_to_check.split(".")[0:-1][0] +".ui"
                         #print "Ui to check: " + ui_to_check
 
-                        if inc.endswith( ".moc" ):
+            if inc.endswith( ".moc" ):
                             #print " Found a moc include: " + inc
-                                ret.append( inc )
+                ret.append( inc )
 
-                        if os.path.exists( ui_to_check ):
+            if os.path.exists( ui_to_check ):
                             #print "Header doesn't exist but .ui file does!"
-                                env.UIBuilder( target = header_to_check, source = ui_to_check )
+                env.UIBuilder( target = header_to_check, source = ui_to_check )
                                 #print [ header_to_check.split("/")[-1] ]
-                                ret.append( header_to_check.split("/")[-1] )
+                ret.append( header_to_check.split("/")[-1] )
 
-                return ret
+        return ret
 
-        print(("\nWarning! was called with an unhandled suffix: [{}]\\n".format(node_extn)))
-        return []
+    print(("\nWarning! was called with an unhandled suffix: [{}]\\n".format(node_extn)))
+    return []
 
 def GetAppVersion( context, app, version ):
     import os
 
-        context.Message( "Checking if the output of '%s' contains '%s' " % (app,version) )
+    context.Message( "Checking if the output of '%s' contains '%s' " % (app,version) )
 
         #out = os.popen3( app )
-        out = subprocess.Popen (app, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
+    out = subprocess.Popen (app, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
 
         #print out[1] + out[2]
-        str = out[1].read() + out[2].read()
+    str = out[1].read() + out[2].read()
 
-        ret = False
+    ret = False
 
-        if str.count( version ) > 0:
-            ret = True
+    if str.count( version ) > 0:
+        ret = True
 
-        context.Result( ret )
-        return ret
+    context.Result( ret )
+    return ret
 
 def generate( env ):
     print("Configuring qt5muc...")
 
-        conf = env.Configure( custom_tests = { 'GetAppVersion' : GetAppVersion } )
+    conf = env.Configure( custom_tests = { 'GetAppVersion' : GetAppVersion } )
+
+    def CommandFromList( commandlist, version ):
+        ret = ""
+        for command in commandlist:
+            if len( ret ) == 0:
+                if conf.GetAppVersion( "%s -v" % command, version ):
+                    ret = command
+        return ret
+
+    moc = CommandFromList( ( "moc", "moc5", "moc-qt5" ), "moc 5." )
+    if len( moc ) < 3:
+        env.Exit( 1 )
+
+    uic = CommandFromList( ( "uic", "uic5", "uic-qt5" ), "5." )
+    if len( uic ) < 3:
+        env.Exit( 1 )
+
+    rcc = CommandFromList( ( "rcc", "rcc5", "rcc-qt5" ), "5." )
+    if len( rcc ) < 3:
+        env.Exit( 1 )
+
+    env = conf.Finish()
+    print("Done. Will define a more or less automatic environment to do all the qt-specific stuff.")
+
+    moc = SCons.Builder.Builder( action="%s $SOURCES > $TARGET" % moc, suffix='.moc', src_suffix='.h'   )
+    uic = SCons.Builder.Builder( action="%s $SOURCES > $TARGET" % uic, suffix='.h',   src_suffix='.ui'  )
+    rcc = SCons.Builder.Builder( action="%s $SOURCES > $TARGET" % rcc, suffix='.cpp', src_suffix=".qrc" )
 
-        def CommandFromList( commandlist, version ):
-            ret = ""
-                for command in commandlist:
-                    if len( ret ) == 0:
-                        if conf.GetAppVersion( "%s -v" % command, version ):
-                            ret = command
-                return ret
-
-        moc = CommandFromList( ( "moc", "moc5", "moc-qt5" ), "moc 5." )
-        if len( moc ) < 3:
-            env.Exit( 1 )
-
-        uic = CommandFromList( ( "uic", "uic5", "uic-qt5" ), "5." )
-        if len( uic ) < 3:
-            env.Exit( 1 )
-
-        rcc = CommandFromList( ( "rcc", "rcc5", "rcc-qt5" ), "5." )
-        if len( rcc ) < 3:
-            env.Exit( 1 )
-
-        env = conf.Finish()
-        print("Done. Will define a more or less automatic environment to do all the qt-specific stuff.")
-
-        moc = SCons.Builder.Builder( action="%s $SOURCES > $TARGET" % moc, suffix='.moc', src_suffix='.h'   )
-        uic = SCons.Builder.Builder( action="%s $SOURCES > $TARGET" % uic, suffix='.h',   src_suffix='.ui'  )
-        rcc = SCons.Builder.Builder( action="%s $SOURCES > $TARGET" % rcc, suffix='.cpp', src_suffix=".qrc" )
-
-        env['BUILDERS']['UIBuilder'] = uic
-        env['BUILDERS']['MOCBuilder'] = moc
-        env['BUILDERS']['RCCBUILDER'] = rcc
+    env['BUILDERS']['UIBuilder'] = uic
+    env['BUILDERS']['MOCBuilder'] = moc
+    env['BUILDERS']['RCCBUILDER'] = rcc
 
-        env['BUILDERS']['StaticObject'].add_emitter( ".cpp", moc_emitter )
-        env['BUILDERS']['SharedObject'].add_emitter( ".cpp", moc_emitter )
+    env['BUILDERS']['StaticObject'].add_emitter( ".cpp", moc_emitter )
+    env['BUILDERS']['SharedObject'].add_emitter( ".cpp", moc_emitter )
 
-        SCons.Tool.SourceFileScanner.add_scanner( '.cpp', SCons.Scanner.Scanner( uic_scanner, skeys=[".h"], recursive=1 ) )
+    SCons.Tool.SourceFileScanner.add_scanner( '.cpp', SCons.Scanner.Scanner( uic_scanner, skeys=[".h"], recursive=1 ) )
 
--- admin/qt5muc.py.orig	2020-03-14 19:31:28.911236177 +0000
+++ admin/qt5muc.py	2020-03-14 19:32:33.690371110 +0000
@@ -79,7 +79,7 @@
     context.Message( "Checking if the output of '%s' contains '%s' " % (app,version) )
 
         #out = os.popen3( app )
-    out = subprocess.Popen (app, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
+    out = subprocess.Popen (app, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True)
 
         #print out[1] + out[2]
     str = out[1].read() + out[2].read()
--- admin/qt5muc.py.orig	2020-03-15 09:19:12.125289202 +0000
+++ admin/qt5muc.py	2020-03-15 09:22:33.498627627 +0000
@@ -79,10 +79,10 @@
     context.Message( "Checking if the output of '%s' contains '%s' " % (app,version) )
 
         #out = os.popen3( app )
-    out = subprocess.Popen (app, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True)
+    out = subprocess.Popen(app, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True)
 
         #print out[1] + out[2]
-    str = out[1].read() + out[2].read()
+    str = out.stdout.read() + out.stderr.read()
 
     ret = False
 
--- SConstruct.orig	2020-03-15 09:51:02.055829932 +0000
+++ SConstruct	2020-03-15 09:51:32.767815779 +0000
@@ -10,7 +10,7 @@
 env = Environment(
 	ENV=os.environ,
 	tools=['default', 'pkgconfig', 'qt5muc'],
-	toolpath=['admin']
+	toolpath=[str.encode('admin')]
 )
 
 env.Replace(LIBS="")
--- SConstruct.orig	2020-03-15 10:10:56.841368866 +0000
+++ SConstruct	2020-03-15 10:11:41.849013329 +0000
@@ -9,7 +9,7 @@
 # Load the builders in config
 env = Environment(
 	ENV=os.environ,
-	tools=['default', 'pkgconfig', 'qt5muc'],
+	tools=['default', 'qt5muc'],
 	toolpath=[str.encode('admin')]
 )
 
--- SConstruct.orig	2020-03-15 10:17:47.211008447 +0000
+++ SConstruct	2020-03-15 10:18:14.182955415 +0000
@@ -9,7 +9,7 @@
 # Load the builders in config
 env = Environment(
 	ENV=os.environ,
-	tools=['default', 'qt5muc'],
+	tools=[str.encode('default'), str.encode('pkgconfig'), str.encode('qt5muc')],
 	toolpath=[str.encode('admin')]
 )
 
