--- CMakeLists.txt.orig	2019-03-27 15:59:01.836747925 +0000
+++ CMakeLists.txt	2019-03-27 15:59:34.788433051 +0000
@@ -10,13 +10,9 @@
 find_package(PkgConfig)
 include(MacroEnsureVersion)
 include(MacroBoolTo01)
-if (WIN32)
-  message("-- Using win32 threads")
-else()
-  set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
-  set(THREADS_PREFER_PTHREAD_FLAG TRUE)
-  find_package(Threads)
-endif()
+set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
+set(THREADS_PREFER_PTHREAD_FLAG TRUE)
+find_package(Threads)
 include(TestBigEndian)
 test_big_endian(WORDS_BIGENDIAN)
 include(CheckFileOffsetBits)
--- poppler/PDFDoc.h.orig	2020-01-17 22:17:09.768325111 +0000
+++ poppler/PDFDoc.h	2020-01-17 22:18:14.027572853 +0000
@@ -41,7 +41,15 @@
 #ifndef PDFDOC_H
 #define PDFDOC_H
 
-#include <mutex>
+#include <boost/thread.hpp>
+namespace std {
+        using boost::mutex;
+        using boost::recursive_mutex;
+        using boost::lock_guard;
+        using boost::condition_variable;
+        using boost::unique_lock;
+        using boost::thread;
+}
 
 #include "poppler-config.h"
 #include <cstdio>
--- poppler/Array.h.orig	2020-01-17 22:29:33.396316569 +0000
+++ poppler/Array.h	2020-01-17 22:30:27.731756509 +0000
@@ -29,7 +29,16 @@
 #define ARRAY_H
 
 #include <atomic>
-#include <mutex>
+#include <boost/thread.hpp>
+namespace std {
+        using boost::mutex;
+        using boost::recursive_mutex;
+        using boost::lock_guard;
+        using boost::condition_variable;
+        using boost::unique_lock;
+        using boost::thread;
+}
+
 #include <vector>
 
 #include "poppler-config.h"
--- poppler/GlobalParams.h.orig	2020-01-17 22:42:21.153093280 +0000
+++ poppler/GlobalParams.h	2020-01-17 22:43:04.565098606 +0000
@@ -45,7 +45,16 @@
 #include <unordered_map>
 #include <string>
 #include <memory>
-#include <mutex>
+#include <boost/thread.hpp>
+namespace std {
+        using boost::mutex;
+        using boost::recursive_mutex;
+        using boost::lock_guard;
+        using boost::condition_variable;
+        using boost::unique_lock;
+        using boost::thread;
+}
+
 #include <vector>
 
 class GooString;
--- poppler/Dict.h.orig	2020-01-17 22:47:15.400707563 +0000
+++ poppler/Dict.h	2020-01-17 22:47:43.352627895 +0000
@@ -31,7 +31,16 @@
 #define DICT_H
 
 #include <atomic>
-#include <mutex>
+#include <boost/thread.hpp>
+namespace std {
+        using boost::mutex;
+        using boost::recursive_mutex;
+        using boost::lock_guard;
+        using boost::condition_variable;
+        using boost::unique_lock;
+        using boost::thread;
+}
+
 #include <string>
 #include <vector>
 #include <utility>
--- poppler/Page.h.orig	2020-01-17 22:50:48.959963708 +0000
+++ poppler/Page.h	2020-01-17 22:51:09.695876981 +0000
@@ -33,7 +33,16 @@
 #ifndef PAGE_H
 #define PAGE_H
 
-#include <mutex>
+#include <boost/thread.hpp>
+namespace std {
+        using boost::mutex;
+        using boost::recursive_mutex;
+        using boost::lock_guard;
+        using boost::condition_variable;
+        using boost::unique_lock;
+        using boost::thread;
+}
+
 
 #include "poppler-config.h"
 #include "Object.h"
--- poppler/Annot.h.orig	2020-01-17 22:53:45.043164082 +0000
+++ poppler/Annot.h	2020-01-17 22:54:14.487017971 +0000
@@ -44,7 +44,15 @@
 
 #include <memory>
 #include <atomic>
-#include <mutex>
+#include <boost/thread.hpp>
+namespace std {
+        using boost::mutex;
+        using boost::recursive_mutex;
+        using boost::lock_guard;
+        using boost::condition_variable;
+        using boost::unique_lock;
+        using boost::thread;
+}
 #include <vector>
 
 #include "Object.h"
--- CMakeLists.txt.orig	2020-01-18 10:14:52.231345304 +0000
+++ CMakeLists.txt	2020-01-18 10:18:27.030274185 +0000
@@ -478,7 +478,7 @@
   # use clean APIs
   add_definitions(-DWIN32_LEAN_AND_MEAN)
   # gdi32 is needed under win32
-  set(poppler_LIBS ${poppler_LIBS} gdi32)
+  set(poppler_LIBS ${poppler_LIBS} gdi32 boost_exception-mt-x64)
 endif()
 if(PNG_FOUND)
   set(poppler_LIBS ${poppler_LIBS} ${PNG_LIBRARIES})
--- cmake/modules/PopplerMacros.cmake.orig	2020-01-18 10:30:50.101523186 +0000
+++ cmake/modules/PopplerMacros.cmake	2020-01-18 10:31:23.743272818 +0000
@@ -123,7 +123,7 @@
   set(DEFAULT_COMPILE_WARNINGS_EXTRA "${_warn} ${_warnx}")
 
   set(_save_cxxflags "${CMAKE_CXX_FLAGS}")
-  set(CMAKE_CXX_FLAGS                "-fno-exceptions -fno-check-new -fno-common -D_DEFAULT_SOURCE")
+  set(CMAKE_CXX_FLAGS                "-fno-check-new -fno-common -D_DEFAULT_SOURCE")
   set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g ${_save_cxxflags}")
   set(CMAKE_CXX_FLAGS_RELEASE        "-O2 -DNDEBUG ${_save_cxxflags}")
   set(CMAKE_CXX_FLAGS_DEBUG          "-g -O2 -fno-reorder-blocks -fno-schedule-insns -fno-inline ${_save_cxxflags}")
--- poppler/CairoFontEngine.h.orig	2020-01-18 10:43:34.531941082 +0000
+++ poppler/CairoFontEngine.h	2020-01-18 10:44:19.006679082 +0000
@@ -30,7 +30,15 @@
 #ifndef CAIROFONTENGINE_H
 #define CAIROFONTENGINE_H
 
-#include <mutex>
+#include <boost/thread.hpp>
+namespace std {
+        using boost::mutex;
+        using boost::recursive_mutex;
+        using boost::lock_guard;
+        using boost::condition_variable;
+        using boost::unique_lock;
+        using boost::thread;
+}
 
 #include "poppler-config.h"
 #include <cairo-ft.h>
